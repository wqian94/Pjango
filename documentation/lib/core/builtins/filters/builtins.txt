Built-in Filter Reference
=========================

References for the built-in filters are found below. Examples,
where appropriate, may be provided.
 
===============================================================

add

Adds two numbers together, merges two arrays together, or if
neither is possible, will resort to concatenating the input and
argument as strings. Strings that can be resolved into numbers
will be treated as numbers, not strings.

Example:
{{ value|add:"2" }} outputs 5 if value is 3.

===============================================================

addslashes

Database-escapes (prepends a backslash to) all
single quotes ('), double quotes ("), and backslashes (\).

Example:
{{ "I'm using Pjango"|addslashes }} outputs "I\'m using Pjango".

===============================================================

capfirst

Capitalizes the first character in the passed string.

Example:
{{ "pjango is cool"|capfirst }} outputs "Pjango is cool".

===============================================================

center

Uses spaces to pad a string to the given length and roughly
center the input string.

Example:
{{ "Pjango"|center:"15 }} outputs "     Pjango    ".

===============================================================

cut

Removes all instances of the argument from the input string.

Example:
{{ "Pjango has spaces"|cut:" " }} outputs "Pjangohasspaces".

===============================================================

date

Calls PHP's date() function, documented http://php.net/date.

If input is a timestamp, it will be passed into the date()
function; otherwise, the current time will be used.

The argument dictates the format of the string.

Example:
{{ value|date:"M j, Y" }} outputs "Jun 23, 2013" if value is
the appropriate timestamp.

If no format is passed as the argument, the default format is
"r", the RFC 2822 format.

Example:
{{ value|date }} output "Sun, 23 Jun 2013 16:38:40 -0400" if
value is the appropriate timestamp.

===============================================================

default

If the input value evaluates (==) to false, outputs the value
of the argument. Otherwise, outputs the value of the input.

Example:
{{ value|default:"False" }} outputs "False" if value is 0,
false, or "".

===============================================================

default_if_none

See default_if_null below.
===============================================================

default_if_null

If the input value is strictly (===) null, outputs the value of
the argument. Otherwise, outputs the value of the input.

Example:
{{ value|defualt:"Null" }} output "Null" if value is strictly
null.

===============================================================

dictsort

Sorts an non-associative array with associative subarrays by
the subarray key provided in the argument.

Example:
If

value is array(array("make"=>"Audi","year"=>1999),
    array("make"=>"Cadillac","year"=>1999),
    array("make"=>"Audi","year"=>2000))

then

{{ value|dictsort:"make" }} outputs


Array(
  [0] => Array(
    "make" => "Audi",
    "year" => 1999
  ),
  [1] => Array(
    "make" => "Audi",
    "year" => 2000
  ),
  [2] => Array(
    "make" => "Cadillac",
    "year" => 1999
  )
)


===============================================================

dictsortreversed

Same as "dictsort", but keys will be in reverse
order, corresponding to the use of "krsort" in PHP's
standard library, as opposed to "ksort".
===============================================================

divisibleby

Returns true if the argument divides evenly into the
input value, and false if not, or if the input value is not a
number. That is, returns true if the input value is congruent
to 0 mod argument.

Example:
{{ value|divisbleby:"2" }} will have a value of true if value
is even.

===============================================================

escape

Escapes a string's HTML by making these replacements:

< is converted to &lt;
> is converted to &gt;
&#39; is converted to &#39;
&quot; is converted to &quot;
& is converted to &amp;

Also prevents any autoescaping from occuring on the resulting
output. See the safe tag for more details.

Behaviorwise, this filter will always be applied last, after
all other filters have been applied, regardless of where this
filter actually appears. In order to escape immediately, use
the "force_escape" filter. Note that "force_escape" does not
prevent its output from being autoescaped.
===============================================================

escapejs

Escapes input string according to JSON rules. That is, applies
PHP's "json_encode" to the input string.
===============================================================

filesizeformat

Uses the numerical value of the input to determine the prefix
appropriate for that value, and returns the string in human-
readable form.

The final numerical value will be no greater than 1000, with
subdivisions of 1024, and no more than 1 digit after the
decimal point.

Example:
{{ value|filesizeformat }} outputs 196.6 KiB if value is 201300.

===============================================================

first

Returns the first item to be iterated in the input if it is an
array, or the first character if the input is a string.

Example:
{{ value|first }} outputs "first" if value is
array("first","second").

===============================================================

fix_ampersands

Replaces ampersands that are not part of HTML entities.

Example:
{{ "Tom & Ben &amp; Jerry"|fix_ampersands }} outputs "Tom &amp; Ben &amp; Jerry".

===============================================================

floatformat

If the argument is nonnegative, the input value is rounded to
exactly that many decimal places, with extra zeroes if
necessary. If the argument is negative, the input value is
rounded to at most abs(argument) number of
places after the decimal. This will exclude any trailing zeroes
in the number.

Example:
{{ 626.2013|floatformat }} outputs 626.2
{{ 626.0000|floatformat }} outputs 626
{{ 626.1900|floatformat }} outputs 626.2

{{ 626.2013|floatformat:3 }} outputs 626.201
{{ 626.0000|floatformat:3 }} outputs 626.000
{{ 626.1900|floatformat:3 }} outputs 626.190

{{ 626.2013|floatformat:-3 }} outputs 626.201
{{ 626.0000|floatformat:-3 }} outputs 626
{{ 626.1900|floatformat:-3 }} outputs 626.190

===============================================================

force_escape

Applies the escape filter immediately, instead of waiting until
the end.
===============================================================

get_digit

Given an argument, returns the digit in the 10^argument place.
That is, the rightmost digit is 0, and increases to the left.

Example:
{{ 9876543210|get_digit:4 }} outputs 4.

===============================================================

join

Joins the input array with the argument string. Does not check
for the input being an array, so expect errors if the input is
not an array. This is essentially a wrapper for the PHP join
function. Default delimiter is "", used in the absence of an
argument.

Example:
{{ value|join:" | " }} outputs "true | false | maybe" if value
is array("true","false","maybe").

===============================================================

last

Returns the last item to be iterated in the input array.
Specifically, it returns the first item to be iterated when the
array is reversed.

Example:
{{ value|first }} outputs "second" if value is
array("first","second").

===============================================================

length

Returns the length of the array, if an array, or string if
otherwise. Applies count() to arrays, and strlen() to strings.

Example:
{{ "Pjango is pretty cool!"|length }} outputs 22.

===============================================================

length_is

Returns whether the argument is equal to the output of applying
the length filter to the input array or string.

Example:
{{ "Pjango is pretty cool!"|length_is:22 }} outputs 1 (true).

===============================================================

linebreaks

Replaces "\n\n" with paragraph breaks (<p>, </p>),
and single "\n" with line breaks (<br />).

Example:
{{ "Paragraph\n\nLinebreak\nEnd"|linebreaks }} outputs
"<p>Paragraph</p><p>Linebreak<br />End</p>".

===============================================================

linebreaksbr

Replaces all "\n" with line breaks (<br />).

Example:
{{ "Paragraph\n\nLinebreak\nEnd"|linebreaks }} outputs
"Paragraph<br /><br />Linebreak<br />End".

===============================================================

linenumbers

Numbers each line based on "\n" characters.

Example:
{{ "one\ntwo\nthree"|linenumbers }} outputs "1. one\n2. two\n3. three".

===============================================================

ljust

Pads the end of the input string with spaces in order to obtain
the string length indicated in the argument.

Example:
{{ "Pjango"|ljust:15 }} outputs "Pjango         ".

===============================================================

lower

Converts all characters in the input string to lowercase.

Example:
{{ "I love Pjango"|lower }} outputs "i love pjango".

===============================================================

make_list

Converts input into an array. First tries to rectify the input
into a string, then applies str_split() to the string, with the
empty string ("") as the delimiter.

Example:
{{ "Pjango"|make_list }} outputs the equivalent of
array("P","j","a","n","g","o").

===============================================================

phone2numeric

Converts a string into telephone numbers by converting all
letters into their appropriate numbers, regardless of case.

Example:
{{ "Pjango"|phone2numeric }} outputs "752646".

===============================================================

pluralize

Outputs a string based on the arguments, and whether the input
value equals 1.

If the argument string has no commas, then it will be used only
if the input value is non-1. If the argument string
has commas, the string before the first comma is the "singular"
string, and the string after the first comma is the "plural"
string. If no argument is passed, the plural string defaults to
the standard English plural "s".

Example:
dog{{ value|pluralize }} prints dogs if value is plural, and
dog if it is singular.

fox{{ value|pluralize:"es" }} prints foxes if value is
plural, and fox if it is singular.

g{{ value|pluralize:"oo,ee" }}se prints geese if value is
plural, and geese if it is singular.

===============================================================

random

Randomly returns a value from the input array.
===============================================================

removetags

Removes [X]HTML tags from the input string, based on the
argument, which is a string of space-separated names of tags to
be removed. Removal is case-sensitive for the tags.

Example:
{{ "<span><b><I>Pjango</I><b><span>"|removetags:"b i span" }}
outputs "<I>Pjango</I>".

===============================================================

rjust

Pads the beginning of the input string with spaces in order to
obtain the string length indicated in the argument.

Example:
{{ "Pjango"|rjust:15 }} outputs "        Pjango"

===============================================================

safe

Prevents the variable from being autoescaped by the
"autoescape" tag.

In terms of mechanics, the VarComponent class recognizes when
the "safe" or "escape" tags are applied to it, and will ignore
the autoescaping flag in such circumstances; this mechanic is,
therefore, uncontrollable from the filter itself.
===============================================================

slice

Uses Python syntax (index1:index2) to extract a subarray from
the input array. The input array cannot be associative, and
this function will throw an error if input is not an array.

Example:
{{ value|slice:"2:-1" }} will return the subarray of value that
starts at index 2 and ends before the last element.

A more concrete example would be

Example:
{{ value|slice:"2:-1" }} outputs the equivalent
array(2,3,4) if the value is array(0,1,2,3,4,5).

If the left bound is after the right bound, the function will
return an empty array.
===============================================================

slugify

Removes all non-alphanumeric and non-space characters from the
input string, and replaces all spaces with hyphens (-).

Example:
{{ "(800) 666 9119"|slugify }} outputs 800-666-9119.

===============================================================

stringformat

Formats the input variable according to the modifier given in
the argument. The "%" in front is dropped. Any
additional modifiers (with percent signs) will result in an
error.

Example:
{{ 3|stringformat:".6f" }} outputs 3.000000.

Details about how to format can be found at http://www.php.net/sprintf.
===============================================================

striptags

Removes complete [X]HTML tags from the input string. A complete
tag begins with "<" and ends with ">".

Example:
{{ "<b>><</b>"|striptags }} outputs "><".

===============================================================

time

Outputs the formatted time string according to the argument.
Obviously, only time arguments will be accepted. If no argument
is provided, the defaullt is set by the "TIME_FORMAT" variable
in the settings.

Additionally, the input must be reducible to a time.

Example:
{{ value|"H:i:s" }} may output "12:34:56".

===============================================================

title

Capitalizes every word in the string, using PHP's ucwords()
function.

Example:
{{ "my first pjango project"|title }} outputs "My First Pjango Project".

===============================================================

truncatechars

If the input string is longer than the length given in the
argument, the string will be truncated to end with ellipses,
represented by 3 periods, to have the length indicated in the
argument. This new length includes the ellipses.

Example:
{{ "Pjango is fun!"|truncatechars:9 }} outputs "Pjango...".

===============================================================

truncatewords

Outputs the first few words in the string, as indicated by the
argument; if there are more words left in the string, the next
word is replaced with ellipses and nothing else is outputted.

Example:
{{ "Pjango is fun!"|truncatewords:2 }} outputs "Pjango is ...".

===============================================================

truncatewords_html

Same as "truncatewords", except that [X]HTML tags are kept
track of and preserved outside the word count. Any unclosed
tags are also automaticall closed. Note that this is
significantly slower than "truncatewords".

Example:
{{ "<p><b>Pjango is fun!</p>"|truncatewords_html:2 }} outputs
"<p><b>Pjango is ...</b></p>".

===============================================================

unordered_list

Recursively converts the input array into a string suitable for
direct insertion between "<ul>" and "</ul>" tags.

Example:
If value is array("Middle",array(6,7,8),"High",array(9,10,11,12)),

{{ value|unordered_list }}

would output

"<li>Middle</li>
<li>
<ul>
	<li>6</li>
	<li>7</li>
	<li>8</li>
</ul>
</li>
<li>High</li>
<li>
<ul>
	<li>9</li>
	<li>10</li>
	<li>11</li>
	<li>12</li>
</ul>
</li>"

===============================================================

upper

Capitalizes all characters in the input string.

Example:
{{ "Pjango is fun!"|upper }} outputs "PJANGO IS FUN!".

===============================================================

urlize

Converts certain links in the input string into anchored links.

Links must begin with "http://", "https://", or "www.".

Alternatively, links with original top-level domains (.com,
.edu, .gov, .int, .mil, .net, and .org) will also be converted.

Example:
{{ "Google: http://google.com goo.gl"|urlize }} outputs

"Google: <a href="http://google.com">http://google.com</a> goo.gl"

===============================================================

urlizetrunc

Works as a combination of the filters "urlize" and
"truncatechars". Does not truncate the link, only the text that
is displayed as a hyperlink.

Example:
{{ "Google: http://google.com"|urlizetrunc:15 }} outputs

"Google: <a href="http://google.com">http://googl...</a>"

===============================================================

wordcount

Returns the number of words found in the input string, where a
word is defined according to PHP's regular expression rules for
a word and word character.

Example:
{{ "THIS. IS. PJANGOOOO!"|wordcount }} outputs 3.

===============================================================

wordwrap

Attempts to wrap each line to have no more than the number of
characters indicated by the argument while still preserving
words. Extra-long words will not be broken up.

Example:
{{ "THIS. IS. PJANGOOOOOOO!"|wordwrap:10 }} outputs

"THIS. IS.
PJANGOOOOOOO!"

===============================================================

yesno

Outputs a string based on a mapping of true, false,
and optionally, null.

The argument string should be in the format of
"(iftrue),(iffalse/ifnull)" or
"(iftrue),(iffalse),(ifnull)". If no argument is
provided, the default is "yes,no,maybe".

Note that checks for false and null are strict equality checks.
This means that 0 and the empty string will evalue to
true for this filter.

Example:
{{ ""|yesno }} outputs "yes".


==========
NAVIGATION
==========
-[Home] Pjango Documentation (/)
---[Installation] Installation Guide (installation/)
---[Libraries] Built-in Libraries (lib/)
-----[Including Library Files] Including Library Files
       (including)
-----[Core] Core (core/)
-------[Core Functions] Core Functions (core/)
-------[Site Settings] Site Settings (site/)
-------[Tags, Filters, and Middleware] Built-in Tags, Filters,
         and Middleware (builtins/)
---------[Filters] Filters (filters/)
-----------[AbstractFilter] abstract class AbstractFilter
             (AbstractFilter)
==========>[Built-in Filters] Built-in Filter Reference
             (builtins)
-----------[Custom Filters] Custom Filters (customFilters)
---------[Middleware] Middleware (middleware/)
---------[Tags] Tags (tags/)
-----[SQL] SQL (sql/)
---[Writing Software] Development and Documentation
     (developing/)
