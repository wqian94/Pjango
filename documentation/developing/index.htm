<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Development and Documentation</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a></li><li><a href="../developing/index.htm" class="nav highlight"" title="Development and Documentation">Writing Software</a><ul><li><a href="../developing/writing.htm" class="nav" title="Writing Documentation">Documentation</a></li><li><a href="../developing/generate.htm" class="nav" title="Generating Documentation">Generating Documentation</a></li></ul></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>Development and Documentation</h1> <hr /> <h2>Code and Documentation</h2> Developing new software for Pjango, whether that be modules, extensions, tags, filters, middleware, etc., has some basic requirements.<br /> <br /> First, all code should be written in a comprehensible manner. Although you are not required to comment your code, comments tend to help in understanding what your code does, as does self-commenting code. This is true especially for code that you expect to be modified later on.<br /> <br /> Second, do your best to make your software object-oriented. Most importantly, this means that you should define classes and set up objective relationships between classes and subclasses, instead of exposing everything to the global scope. This is both a security measure and a good convention in collaborative projects with independent modules.<br /> <br /> Third, you are not expected to throw an error if your software is misused. However, you may find it useful to do so, such that bugs in your code can be more easily discovered and fixed. Of course, you may create your own error classes and methods of throwing errors.<br /> <br /> Finally, make your documentation concise and obvious. From the documentation, it should be clear how your software is to be used. It may help to provide examples of syntax. Furthermore, classes and variables should have short decriptions of their purposes in your software, as well as their scope and whether they are static or instance variables or functions. Also make any notes about security loopholes, prerequisites, and any additional precautions. </div> </div> </body> </html>