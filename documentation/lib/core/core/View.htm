<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Built-in Libraries > Core > Core Functions > class View</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../../../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../../../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../../../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a><ul><li><a href="../../../lib/including.htm" class="nav" title="Including Library Files">Including Library Files</a></li><li><a href="../../../lib/core/index.htm" class="nav" title="Core">Core</a><ul><li><a href="../../../lib/core/constants/index.htm" class="nav" title="Pjango Built-in Constants">Constants</a></li><li><a href="../../../lib/core/core/index.htm" class="nav" title="Core Functions">Core Functions</a><ul><li><a href="../../../lib/core/core/AbstractComponent.htm" class="nav" title="abstract class AbstractComponent">AbstractComponent</a></li><li><a href="../../../lib/core/core/RootComponent.htm" class="nav" title="class RootComponent">RootComponent</a></li><li><a href="../../../lib/core/core/TagComponent.htm" class="nav" title="class TagComponent">TagComponent</a></li><li><a href="../../../lib/core/core/Token.htm" class="nav" title="class Token">Token</a></li><li><a href="../../../lib/core/core/TxtComponent.htm" class="nav" title="class TxtComponent">TxtComponent</a></li><li><a href="../../../lib/core/core/ValComponent.htm" class="nav" title="class ValComponent">ValComponent</a></li><li><a href="../../../lib/core/core/View.htm" class="nav highlight"" title="class View">View</a></li></ul></li><li><a href="../../../lib/core/site/index.htm" class="nav" title="Site Settings">Site Settings</a></li><li><a href="../../../lib/core/builtins/index.htm" class="nav" title="Built-in Tags, Filters, and Middleware">Tags, Filters, and Middleware</a></li></ul></li><li><a href="../../../lib/sql/index.htm" class="nav" title="SQL">SQL</a></li></ul></li><li><a href="../../../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>class View</h1> <hr /> The View class is responsible for parsing the loaded template files into the tree-like component structure, and for sending the signal to render.<br /> <br /> To load a template '<span class="variable">base.html</span>' and render it, we can write:<br /> <br /> <code>$view=new View("base.html");<br /> $view->display();</code><br /> <br /> We can also include variables to be used in the template:<br /> <br /> <code class="block">$view->display($variable_array);</code><br /> <br /> The identifier for each variable is its key in the array, so if<br /> <br /> <code>$variable_array["FOO"]=123;</code><br /> <br /> then <code>{{ foo }}</code> in the template would have the value of <code>123</code>. <h3>Instance Variables</h3> <span class="boldVariable">private root</span> -- Initialized null, contains the root component.<br /> <br /> <span class="boldVariable">private text</span> -- Initialized null, contains the string to parse. <h3>Functions</h3> <span class="boldVariable">__construct($input=null,$isFile=true)</span> -- Loads <span class="boldVariable">$input</span> as either text or file, based on <span class="boldVariable">$isFile</span>.<br /> <br /> <span class="boldVariable">createComponents()</span> -- Parses <span class="boldVariable">text</span> to generate the component tree structure. Stores root in <span class="boldVariable">root</span>, and returns it.<br /> <br /> <span class="boldVariable">display($args=array())</span> -- Makes call to <span class="boldVariable">render($args)</span> and prints result.<br /> <br /> <span class="boldVariable">getText()</span> -- Returns the <span class="boldVariable">text</span> instance variable's contents.<br /> <br /> <span class="boldVariable">load($input)</span> -- Attempts to load <span class="boldVariable">$input</span> as file, falling back to loading as text upon failure.<br /> <br /> <span class="boldVariable">load_file($file)</span> -- Searches through all views for <span class="boldVariable">$file</span>, and stores the contents in <span class="boldVariable">text</span>.<br /> <br /> <span class="boldVariable">load_text($text)</span> -- Sets <span class="boldVariable">text</span> as <span class="boldVariable">$text</span>.<br /> <br /> <span class="boldVariable">render($args=array())</span> -- Makes call to <span class="boldVariable">createComponents</span>, renders <span class="boldVariable">root</span>, passes the rendered string through the middlewares, and returns the result. </div> </div> </body> </html>