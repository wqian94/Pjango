class __SITE
============

The main structure used for storing the site's settings, the
__SITE class contains only static variables and functions, to
eliminate the need to declare an instance of the class. This
prevents the accidental deletion of the instance, or access
otherwise that could destroy the entire infrastructure of this
framework.

As such, all of the functions should be accessed using

"__SITE::function_name(arguments...)"

This class's static variables have protected scope, so they
cannot be accessed from outside the class. If you absolutely
must manipulate something during runtime, you may declare a
subclass of __SITE and use that to manipulate the
variables that exist in __SITE.

Be advised, however, that nothing in "site.php" should be
modified, as unexpected results may happen. Instead, use the
"settings.php" file in the library root "lib/" to
apply your settings.
 
Static Variables
 
protected filters -- Initialized as an empty array, it
  stores the names-classname pairs of filters as "key=>value"
  pairs in the array.

protected middleware -- Initialized as an empty array,
  it stores the priority-classname pairs as key and value,
  respectively. During execution, middleware associated with
  larger priority keys are executed before those associated
  with smaller priority keys.

  All middleware should be included at once, in appropriate
  order, in "settings.php". There should be no calls to add or
  remove any middleware after the one in "settings.php".

protected tags -- Initialized as an empty array, it
  stores the names-classname pairs of all tags as "key=>value"
  pairs in the array.

protected unclosed_tags -- Initialized as an empty
  array, it stores the names of all tags that have no
  associated closing tag as "key=>value" pairs in the array.
  That is, these tags are self-closing.

protected unclosed_content_tags -- Initialized as an
  empty array, it stores the names of all tags that are part of
  another tag, e.g. elif, as key=>value pairs in the
  array. This allows these tags to have child components, but
  are ended with an endtag that does not correspond to their
  own classnames.

protected vars -- Initialized as an array, it stores the
  variables to be used in the template files by associating the
  variable name to its value as "key=>value" pairs.
  Essentially, these are the system globals within the context
  of the framework.
 
Functions
 
static addFilter($name,$obj)
  -- Registers a filter with the __SITE class. $name is the
     name of the filter, and $obj is an instance of the class
     to associate.

static addTag($name,$obj,$unclosed=false,$content=false)
  -- Registers a tag with the __SITE class. $name is the name
     of the tag, $obj is an instance of the class to use,
     $unclosed indicates whether the tag should be
     self-closing (default is false), and $content
     indicates whether a self-closing tag should be allowed to
     have child components (default is false). Note that if
     $unclosed is false, setting $content will have no effect.

static addMiddleware($m)
  -- $m is an associative array, with keys as priority values
     and values as the middleware classnames. Middleware with
     larger priority values are applied before those with
     smaller priority values.

     Note: This function should only be called once.

static addVars($v)
  -- $v is an associative array, with keys as variable names
     and values as the variable values.

static execFilter($name,$args,$str,&$vars)
  -- Calls the call_render() function of the class associated
     with the filter name $name, which subsequently calls its
     render($args,$var,$vars) function. This render function
     must be static to the class, which in turn must extend
     from the AbstractFilter class. $args is the array of all
     arguments passed into the filter, $str is the string to
     apply the filter to, and $vars is the array containing the
     system globals at that point in execution, which may
     include introduced variables, such as loop variables in a
     for-loop.
     
     Since $vars is passed in by reference,
     the filter has the capability to access the system
     variables by reference as well.

static execMiddleware($rendered)
  -- Calls the render($text) functions of the registered
     middleware classes. Classes are called in decreasing order
     of priority, which is based on the value of the keys
     associated with the classnames of each middleware in the
     middlewares static variable.

static execTag($name,$args,$comp,&$vars)
  -- Calls the call_render() function of the class associated
     with the tag name $name, which subsequently calls its own
     render($args,$c,$vars) function. This render function
     must be static to the class, which in turn must extend
     from the AbstractTag class. $args is the array containing
     the arguments of the tag, $comp contains the child
     components of the tag, and $vars contains the system
     global variables at that point in execution. This may or may
     not include introduced variables, such as loop variables
     if within a for-loop.
     
     Since $vars is passed in by reference,
     the tag has the capability to access the system variables
     by reference as well.

static get()
  -- Returns a direct copy of the system globals as stored in
     the __SITE class.

static getTagNames()
  -- Returns an array containing all tag names.

static getUnclosedTagNames()
  -- Returns an array containing only the tag names of tags
     that are self-closing and do not have child components.

static getUnclosedContentTagNames()
  -- Returns an array containing only the tag names of tags
     that are self-closing and can have child components.

static preprocess()
  -- Runs the preprocess() static functions of the middleware
     that is installed, in forward ordering of the keys, as
     opposed to backwards in executing the middleware.

static refactor()
  -- Ensures all PATH variables end with /, and that
     all views are absolute paths. This modifies these variables
     as stored in the __SITE class.

static set()
  -- Sets the internally stored system globals as actual global
     variables, prepended with __. E.g. $__PATH.


==========
NAVIGATION
==========
-[Home] Pjango Documentation (index.)
---[Installation] Installation Guide (index.)
---[Libraries] Built-in Libraries (index.)
-----[Including Library Files] Including Library Files
       (including.)
-----[Core] Core (index.)
-------[Core Functions] Core Functions (index.)
---------[AbstractComponent] abstract class AbstractComponent
           (AbstractComponent.)
---------[RootComponent] class RootComponent (RootComponent.)
---------[TagComponent] class TagComponent (TagComponent.)
---------[Token] class Token (Token.)
---------[TxtComponent] class TxtComponent (TxtComponent.)
---------[ValComponent] class ValComponent (ValComponent.)
---------[View] class View (View.)
-------[Site Settings] Site Settings (index.)
========>[__SITE Class and Object] class __SITE (__SITE.)
-------[Tags, Filters, and Middleware] Built-in Tags, Filters,
         and Middleware (index.)
---------[Filters] Filters (index.)
-----------[AbstractFilter] abstract class AbstractFilter
             (AbstractFilter.)
-----------[Built-in Filters] Built-in Filter Reference
             (builtins.)
-----------[Custom Filters] Custom Filters (customFilters.)
---------[Middleware] Middleware (index.)
-----------[AbstractMiddleware] abstract class
             AbstractMiddleware (AbstractMiddleware.)
-----------[Built-in Middleware] Built-in Middleware Reference
             (builtins.)
-----------[Custom Middleware] Custom Middleware
             (customMiddleware.)
---------[Tags] Tags (index.)
-----------[AbstractTag] abstract class AbstractTag
             (AbstractTag.)
-----------[Built-in Tags] Built-in Tag Reference (builtins.)
-----------[Custom Tags] Custom Tags (customTags.)
-----[SQL] SQL (index.)
---[Writing Software] Development and Documentation (index.)
