<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Built-in Libraries > Core > Built-in Tags, Filters, and Middleware > Filters > Built-in Filter Reference</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../../../../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../../../../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../../../../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a><ul><li><a href="../../../../lib/including.htm" class="nav" title="Including Library Files">Including Library Files</a></li><li><a href="../../../../lib/core/index.htm" class="nav" title="Core">Core</a><ul><li><a href="../../../../lib/core/core/index.htm" class="nav" title="Core Functions">Core Functions</a></li><li><a href="../../../../lib/core/site/index.htm" class="nav" title="Site Settings">Site Settings</a></li><li><a href="../../../../lib/core/builtins/index.htm" class="nav" title="Built-in Tags, Filters, and Middleware">Tags, Filters, and Middleware</a><ul><li><a href="../../../../lib/core/builtins/filters/index.htm" class="nav" title="Filters">Filters</a><ul><li><a href="../../../../lib/core/builtins/filters/AbstractFilter.htm" class="nav" title="abstract class AbstractFilter">AbstractFilter</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm" class="nav highlight"" title="Built-in Filter Reference">Built-in Filters</a><ul style="list-style-type:disc;"><li><a href="../../../../lib/core/builtins/filters/builtins.htm#add" class="nav" title="add">add</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#addslashes" class="nav" title="addslashes">addslashes</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#capfirst" class="nav" title="capfirst">capfirst</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#center" class="nav" title="center">center</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#cut" class="nav" title="cut">cut</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#date" class="nav" title="date">date</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#default" class="nav" title="default">default</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#default_if_none" class="nav" title="default_if_none">default_if_none</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#default_if_null" class="nav" title="default_if_null">default_if_null</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#dictsort" class="nav" title="dictsort">dictsort</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#dictsortreversed" class="nav" title="dictsortreversed">dictsortreversed</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#divisibleby" class="nav" title="divisibleby">divisibleby</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#escape" class="nav" title="escape">escape</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#escapejs" class="nav" title="escapejs">escapejs</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#filesizeformat" class="nav" title="filesizeformat">filesizeformat</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#first" class="nav" title="first">first</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#fix_ampersands" class="nav" title="fix_ampersands">fix_ampersands</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#floatformat" class="nav" title="floatformat">floatformat</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#force_escape" class="nav" title="force_escape">force_escape</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#get_digit" class="nav" title="get_digit">get_digit</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#join" class="nav" title="join">join</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#last" class="nav" title="last">last</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#length" class="nav" title="length">length</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#length_is" class="nav" title="length_is">length_is</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#linebreaks" class="nav" title="linebreaks">linebreaks</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#linebreakbr" class="nav" title="linebreakbr">linebreakbr</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#linenumbers" class="nav" title="linenumbers">linenumbers</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#ljust" class="nav" title="ljust">ljust</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#lower" class="nav" title="lower">lower</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#make_list" class="nav" title="make_list">make_list</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#phone2numeric" class="nav" title="phone2numeric">phone2numeric</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#pluralize" class="nav" title="pluralize">pluralize</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#random" class="nav" title="random">random</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#removetags" class="nav" title="removetags">removetags</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#rjust" class="nav" title="rjust">rjust</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#safe" class="nav" title="safe">safe</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#slice" class="nav" title="slice">slice</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#slugify" class="nav" title="slugify">slugify</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#stringformat" class="nav" title="stringformat">stringformat</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#striptags" class="nav" title="striptags">striptags</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#time" class="nav" title="time">time</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#title" class="nav" title="title">title</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#truncatechars" class="nav" title="truncatechars">truncatechars</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#truncatewords" class="nav" title="truncatewords">truncatewords</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#truncatewords_html" class="nav" title="truncatewords_html">truncatewords_html</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#unordered_list" class="nav" title="unordered_list">unordered_list</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#upper" class="nav" title="upper">upper</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#urlize" class="nav" title="urlize">urlize</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#urlizetrunc" class="nav" title="urlizetrunc">urlizetrunc</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#wordcount" class="nav" title="wordcount">wordcount</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#wordwrap" class="nav" title="wordwrap">wordwrap</a></li><li><a href="../../../../lib/core/builtins/filters/builtins.htm#yesno" class="nav" title="yesno">yesno</a></li></ul></li><li><a href="../../../../lib/core/builtins/filters/customFilters.htm" class="nav" title="Custom Filters">Custom Filters</a></li></ul></li><li><a href="../../../../lib/core/builtins/middleware/index.htm" class="nav" title="Middleware">Middleware</a></li><li><a href="../../../../lib/core/builtins/tags/index.htm" class="nav" title="Tags">Tags</a></li></ul></li></ul></li><li><a href="../../../../lib/sql/index.htm" class="nav" title="SQL">SQL</a></li></ul></li><li><a href="../../../../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>Built-in Filter Reference</h1> <hr /> <div style="margin:1em 0;">References for the built-in filters are found below. Examples, where appropriate, may be provided. </div> <hr /> <a id="add"></a><h2>add</h2> Adds two numbers together, merges two arrays together, or if neither is possible, will resort to concatenating the input and argument as strings. Strings that can be resolved into numbers will be treated as numbers, not strings. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|add:"2" }}</span> outputs <span class="variable">5</span> if <span class="variable">value</span> is <span class="variable">3</span>. </div> <hr /> <a id="addslashes"></a><h2>addslashes</h2> Database-escapes (prepends a backslash to) all single quotes ('), double quotes ("), and backslashes (\). <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "I'm using Pjango"|addslashes }}</span> outputs <span class="variable">"I\'m using Pjango"</span>. </div> <hr /> <a id="capfirst"></a><h2>capfirst</h2> Capitalizes the first character in the passed string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "pjango is cool"|capfirst }}</span> outputs <span class="variable">"Pjango is cool"</span>. </div> <hr /> <a id="center"></a><h2>center</h2> Uses spaces to pad a string to the given length and roughly center the input string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango"|center:"15 }}</span> outputs <span class="variable">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pjango&nbsp;&nbsp;&nbsp;&nbsp;"</span>. </div> <hr /> <a id="cut"></a><h2>cut</h2> Removes all instances of the argument from the input string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango has spaces"|cut:" " }}</span> outputs <span class="variable">"Pjangohasspaces"</span>. </div> <hr /> <a id="date"></a><h2>date</h2> Calls PHP's <span class="variable">date()</span> function, documented <a href="http://php.net/date">http://php.net/date</a>.<br /> <br /> If input is a timestamp, it will be passed into the <span class="variable">date()</span> function; otherwise, the current time will be used.<br /> <br /> The argument dictates the format of the string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|date:"M j, Y" }}</span> outputs <span class="variable">"Jun 23, 2013"</span> if <span class="variable">value</span> is the appropriate timestamp. </div> If no format is passed as the argument, the default format is <span class="variable">"r"</span>, the RFC 2822 format. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|date }}</span> output <span class="variable">"Sun, 23 Jun 2013 16:38:40 -0400"</span> if <span class="variable">value</span> is the appropriate timestamp. </div> <hr /> <a id="default"></a><h2>default</h2> If the input value evaluates (==) to <span class="variable">false</span>, outputs the value of the argument. Otherwise, outputs the value of the input. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|default:"False" }}</span> outputs <span class="variable">"False"</span> if <span class="variable">value</span> is <span class="variable">0</span>, <span class="variable">false</span>, or <span class="variable">""</span>. </div> <hr /> <a id="default_if_none"></a><h2>default_if_none</h2> See <span class="variable">default_if_null</span> below. <hr /> <a id="default_if_null"></a><h2>default_if_null</h2> If the input value is strictly (===) <span class="variable">null</span>, outputs the value of the argument. Otherwise, outputs the value of the input. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|defualt:"Null" }}</span> output <span class="variable">"Null"</span> if <span class="variable">value</span> is strictly <span class="variable">null</span>. </div> <hr /> <a id="dictsort"></a><h2>dictsort</h2> Sorts an non-associative array with associative subarrays by the subarray key provided in the argument. <div class="example"><h4 class="struct">Example:</h4> If <span class="variable"> value</span> is <span class="variable">array(array("make"=>"Audi","year"=>1999),<span class="nodisplay"> </span>array("make"=>"Cadillac","year"=>1999),<span class="nodisplay"> </span>array("make"=>"Audi","year"=>2000))</span><br /> <br /> then<br /> <br /> <span class="variable">{{ value|dictsort:"make" }}</span> outputs<br /> <br /> <span class="variable"> Array(<br /> &nbsp;&nbsp;[0] => Array(<br /> &nbsp;&nbsp;&nbsp;&nbsp;"make" => "Audi",<br /> &nbsp;&nbsp;&nbsp;&nbsp;"year" => 1999<br /> &nbsp;&nbsp;),<br /> &nbsp;&nbsp;[1] => Array(<br /> &nbsp;&nbsp;&nbsp;&nbsp;"make" => "Audi",<br /> &nbsp;&nbsp;&nbsp;&nbsp;"year" => 2000<br /> &nbsp;&nbsp;),<br /> &nbsp;&nbsp;[2] => Array(<br /> &nbsp;&nbsp;&nbsp;&nbsp;"make" => "Cadillac",<br /> &nbsp;&nbsp;&nbsp;&nbsp;"year" => 1999<br /> &nbsp;&nbsp;)<br /> ) </span> </div> <hr /> <a id="dictsortreversed"></a><h2>dictsortreversed</h2> Same as <code>dictsort</code>, but keys will be in reverse order, corresponding to the use of <code>krsort</code> in PHP's standard library, as opposed to <code>ksort</code>. <hr /> <a id="divisibleby"></a><h2>divisibleby</h2> Returns <span class="variable">true</span> if the argument divides evenly into the input value, and false if not, or if the input value is not a number. That is, returns true if the input value is congruent to <span class="variable">0 mod argument</span>. <div class="example"><h4 class="struct">Example:</h4> {{ value|divisbleby:"2" }} will have a value of <span class="variable">true</span> if <span class="variable">value</span> is even. </div> <hr /> <a id="escape"></a><h2>escape</h2> Escapes a string's HTML by making these replacements:<br /> <br /> <ul><li><span class="variable">&lt;</span> is converted to <span class="variable">&amp;lt;</span></li> <li><span class="variable">&gt;</span> is converted to <span class="variable">&amp;gt;</span></li> <li><span class="variable">&#39;</span> is converted to <span class="variable">&amp;#39;</span></li> <li><span class="variable">&quot;</span> is converted to <span class="variable">&amp;quot;</span></li> <li><span class="variable">&amp;</span> is converted to <span class="variable">&amp;amp;</span></li></ul><br /> <br /> Also prevents any autoescaping from occuring on the resulting output. See the <a href="builtins.htm#safe">safe tag</a> for more details.<br /> <br /> Behaviorwise, this filter will always be applied last, after all other filters have been applied, regardless of where this filter actually appears. In order to escape immediately, use the <code>force_escape</code> filter. Note that <code>force_escape</code> does not prevent its output from being autoescaped. <hr /> <a id="escapejs"></a><h2>escapejs</h2> Escapes input string according to JSON rules. That is, applies PHP's <code>json_encode</code> to the input string. <hr /> <a id="filesizeformat"></a><h2>filesizeformat</h2> Uses the numerical value of the input to determine the prefix appropriate for that value, and returns the string in human- readable form.<br /> <br /> The final numerical value will be no greater than 1000, with subdivisions of 1024, and no more than 1 digit after the decimal point. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|filesizeformat }}</span> outputs <span class="variable">196.6 KiB</span> if <span class="variable">value</value> is <span class="variable">201300</span>. </div> <hr /> <a id="first"></a><h2>first</h2> Returns the first item to be iterated in the input if it is an array, or the first character if the input is a string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|first }}</span> outputs <span class="variable">"first"</span> if <span class="variable">value</span> is <span class="variable">array("first","second")</span>. </div> <hr /> <a id="fix_ampersands"></a><h2>fix_ampersands</h2> Replaces ampersands that are not part of HTML entities. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Tom &amp; Ben &amp;amp; Jerry"|fix_ampersands }}</span> outputs <span class="variable">"Tom &amp;amp; Ben &amp;amp; Jerry"</span>. </div> <hr /> <a id="floatformat"></a><h2>floatformat</h2> If the argument is nonnegative, the input value is rounded to exactly that many decimal places, with extra zeroes if necessary. If the argument is negative, the input value is rounded to at most <span class="variable">abs(argument)</span> number of places after the decimal. This will exclude any trailing zeroes in the number. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ 626.2013|floatformat }}</span> outputs <span class="variable">626.2</span><br /> <span class="variable">{{ 626.0000|floatformat }}</span> outputs <span class="variable">626</span><br /> <span class="variable">{{ 626.1900|floatformat }}</span> outputs <span class="variable">626.2</span><br /> <br /> <span class="variable">{{ 626.2013|floatformat:3 }}</span> outputs <span class="variable">626.201</span><br /> <span class="variable">{{ 626.0000|floatformat:3 }}</span> outputs <span class="variable">626.000</span><br /> <span class="variable">{{ 626.1900|floatformat:3 }}</span> outputs <span class="variable">626.190</span><br /> <br /> <span class="variable">{{ 626.2013|floatformat:-3 }}</span> outputs <span class="variable">626.201</span><br /> <span class="variable">{{ 626.0000|floatformat:-3 }}</span> outputs <span class="variable">626</span><br /> <span class="variable">{{ 626.1900|floatformat:-3 }}</span> outputs <span class="variable">626.190</span> </div> <hr /> <a id="force_escape"></a><h2>force_escape</h2> Applies the <span class="variable">escape</span> filter immediately, instead of waiting until the end. <hr /> <a id="get_digit"></a><h2>get_digit</h2> Given an argument, returns the digit in the <span class="variable">10<span class="superscript">argument</span></span> place. That is, the rightmost digit is <span class="variable">0</span>, and increases to the left. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ 9876543210|get_digit:4 }}</span> outputs <span class="variable">4</span>. </div> <hr /> <a id="join"></a><h2>join</h2> Joins the input array with the argument string. Does not check for the input being an array, so expect errors if the input is not an array. This is essentially a wrapper for the PHP <span class="variable">join</span> function. Default delimiter is <span class="variable">""</span>, used in the absence of an argument. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|join:" | " }}</span> outputs <span class="variable">"true | false | maybe"</span> if <span class="variable">value</span> is <span class="variable">array("true","false","maybe")</span>. </div> <hr /> <a id="last"></a><h2>last</h2> Returns the last item to be iterated in the input array. Specifically, it returns the first item to be iterated when the array is reversed. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|first }}</span> outputs <span class="variable">"second"</span> if <span class="variable">value</span> is <span class="variable">array("first","second")</span>. </div> <hr /> <a id="length"></a><h2>length</h2> Returns the length of the array, if an array, or string if otherwise. Applies <span class="variable">count()</span> to arrays, and <span class="variable">strlen()</span> to strings. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango is pretty cool!"|length }}</span> outputs <span class="variable">22</span>. </div> <hr /> <a id="length_is"></a><h2>length_is</h2> Returns whether the argument is equal to the output of applying the <span class="variable">length</span> filter to the input array or string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango is pretty cool!"|length_is:22 }}</span> outputs <span class="variable">1</span> (<span class="variable">true</span>). </div> <hr /> <a id="linebreaks"></a><h2>linebreaks</h2> Replaces <span class="variable">"\n\n"</span> with paragraph breaks (<span class="variable">&lt;p&gt;</span>, <span class="variable">&lt;/p&gt;</span>), and single <span class="variable">"\n"</span> with line breaks (<span class="variable">&lt;br /&gt;</span>). <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Paragraph\n\nLinebreak\nEnd"|linebreaks }}</span> outputs <span class="variable">"&lt;p&gt;Paragraph&lt;/p&gt;&lt;p&gt;Linebreak&lt;br /&gt;End&lt;/p&gt;"</span>. </div> <hr /> <a id="linebreaksbr"></a><h2>linebreaksbr</h2> Replaces all <span class="variable">"\n"</span> with line breaks (<span class="variable">&lt;br /&gt;</span>). <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Paragraph\n\nLinebreak\nEnd"|linebreaks }}</span> outputs <span class="variable">"Paragraph&lt;br /&gt;&lt;br /&gt;Linebreak&lt;br /&gt;End"</span>. </div> <hr /> <a id="linenumbers"></a><h2>linenumbers</h2> Numbers each line based on <span class="variable">"\n"</span> characters. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "one\ntwo\nthree"|linenumbers }}</span> outputs <span class="variable">"1. one\n2. two\n3. three"</span>. </div> <hr /> <a id="ljust"></a><h2>ljust</h2> Pads the end of the input string with spaces in order to obtain the string length indicated in the argument. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango"|ljust:15 }}</span> outputs <span class="variable">"Pjango&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"</span>. </div> <hr /> <a link="lower"></a><h2>lower</h2> Converts all characters in the input string to lowercase. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "I love Pjango"|lower }}</span> outputs <span class="variable">"i love pjango"</span>. </div> <hr /> <a link="make_list"></a><h2>make_list</h2> Converts input into an array. First tries to rectify the input into a string, then applies <span class="variable">str_split()</span> to the string, with the empty string (<span class="variable">""</span>) as the delimiter. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango"|make_list }}</span> outputs the equivalent of <span class="variable">array("P","j","a","n","g","o")</span>. </div> <hr /> <a id="phone2numeric"></a><h2>phone2numeric</h2> Converts a string into telephone numbers by converting all letters into their appropriate numbers, regardless of case. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango"|phone2numeric }}</span> outputs <span class="variable">"752646"</span>. </div> <hr /> <a id="puralize"></a><h2>pluralize</h2> Outputs a string based on the arguments, and whether the input value equals <span class="variable">1</span>.<br /> <br /> If the argument string has no commas, then it will be used only if the input value is non-<span class="variable">1</span>. If the argument string has commas, the string before the first comma is the "singular" string, and the string after the first comma is the "plural" string. If no argument is passed, the plural string defaults to the standard English plural <span class="variable">"s"</span>. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">dog{{ value|pluralize }}</span> prints <span class="variable">dogs</span> if <span class="variable">value</span> is plural, and <span class="variable">dog</span> if it is singular.<br /> <br /> <span class="variable">fox{{ value|pluralize:"es" }}</span> prints <span class="variable">foxes</span> if <span class="variable">value</value> is plural, and <span class="variable">fox</span> if it is singular.<br /> <br /> <span class="variable">g{{ value|pluralize:"oo,ee" }}se</span> prints <span class="variable">geese</span> if <span class="variable">value</value> is plural, and <span class="variable">geese</span> if it is singular. </div> <hr /> <a id="random"></a><h2>random</h2> Randomly returns a value from the input array. <hr /> <a id="removetags"></a><h2>removetags</h2> Removes [X]HTML tags from the input string, based on the argument, which is a string of space-separated names of tags to be removed. Removal is case-sensitive for the tags. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "&lt;span&gt;&lt;b&gt;&lt;I&gt;Pjango&lt;/I&gt;&lt;b&gt;&lt;span&gt;"|removetags:"b i span" }}</span> outputs <span class="variable">"&lt;I&gt;Pjango&lt;/I&gt;"</span>. </div> <hr /> <a id="rjust"></a><h2>rjust</h2> Pads the beginning of the input string with spaces in order to obtain the string length indicated in the argument. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango"|rjust:15 }}</span> outputs <span class="variable">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pjango"</span> </div> <hr /> <a id="safe"></a><h2>safe</h2> Prevents the variable from being autoescaped by the <code>autoescape</code> tag.<br /> <br /> In terms of mechanics, the <span class="variable">VarComponent</span> class recognizes when the <code>safe</code> or <code>escape</code> tags are applied to it, and will ignore the autoescaping flag in such circumstances; this mechanic is, therefore, uncontrollable from the filter itself. <hr /> <a id="slice"></a><h2>slice</h2> Uses Python syntax (<span class="variable">index1:index2</span>) to extract a subarray from the input array. The input array cannot be associative, and this function will throw an error if input is not an array. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|slice:"2:-1" }}</span> will return the subarray of <span class="variable">value</span> that starts at index <span class="variable">2</span> and ends before the last element. </div> A more concrete example would be <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|slice:"2:-1" }}</span> outputs the equivalent <span class="variable">array(2,3,4)</span> if the <span class="variable">value</span> is <span class="variable">array(0,1,2,3,4,5)</span>. </div> If the left bound is after the right bound, the function will return an empty array. <hr /> <a id="slugify"></a><h2>slugify</h2> Removes all non-alphanumeric and non-space characters from the input string, and replaces all spaces with hyphens (<span class="variable">-</span>). <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "(800) 666 9119"|slugify }}</span> outputs <span class="variable">800-666-9119</span>. </div> <hr /> <a id="stringformat"></a><h2>stringformat</h2> Formats the input variable according to the modifier given in the argument. The <code>%</code> in front is dropped. Any additional modifiers (with percent signs) will result in an error. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ 3|stringformat:".6f" }}</span> outputs <span class="variable">3.000000</span>. </div> Details about how to format can be found at <a href="http://www.php.net/sprintf">http://www.php.net/sprintf</a>. <hr /> <a id="striptags"></a><h2>striptags</h2> Removes complete [X]HTML tags from the input string. A complete tag begins with <code>&lt;</code> and ends with <code>&gt;</code>. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "&lt;b&gt;&gt;&lt;&lt;/b&gt;"|striptags }}</span> outputs <span class="variable">"&gt;&lt;"</span>. </div> <hr /> <a id="time"></a><h2>time</h2> Outputs the formatted time string according to the argument. Obviously, only time arguments will be accepted. If no argument is provided, the defaullt is set by the <code>TIME_FORMAT</code> variable in the settings.<br /> <br /> Additionally, the input must be reducible to a time. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ value|"H:i:s" }}</span> may output <span class="variable">"12:34:56"</span>. </div> <hr /> <a id="title"></a><h2>title</h2> Capitalizes every word in the string, using PHP's <span class="variable">ucwords()</span> function. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "my first pjango project"|title }}</span> outputs <span class="variable">"My First Pjango Project"</span>. </div> <hr /> <a id="truncatechars"></a><h2>truncatechars</h2> If the input string is longer than the length given in the argument, the string will be truncated to end with ellipses, represented by 3 periods, to have the length indicated in the argument. This new length includes the ellipses. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango is fun!"|truncatechars:9 }}</span> outputs <span class="variable">"Pjango..."</span>. </div> <hr /> <a id="truncatewords"></a><h2>truncatewords</h2> Outputs the first few words in the string, as indicated by the argument; if there are more words left in the string, the next word is replaced with ellipses and nothing else is outputted. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango is fun!"|truncatewords:2 }}</span> outputs <span class="variable">"Pjango is ..."</span>. </div> <hr /> <a id="truncatewords_html"></a><h2>truncatewords_html</h2> Same as <code>truncatewords</code>, except that [X]HTML tags are kept track of and preserved outside the word count. Any unclosed tags are also automaticall closed. Note that this is significantly slower than <code>truncatewords</code>. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "&lt;p&gt;&lt;b&gt;Pjango is fun!&lt;/p&gt;"|truncatewords_html:2 }}</span> outputs <span class="variable">"&lt;p&gt;&lt;b&gt;Pjango is ...&lt;/b&gt;&lt;/p&gt;"</span>. </div> <hr /> <a id="unordered_list"></a><h2>unordered_list</h2> Recursively converts the input array into a string suitable for direct insertion between <code>&lt;ul&gt;</code> and <code>&lt;/ul&gt;</code> tags. <div class="example"><h4 class="struct">Example:</h4> If <span class="variable">value</value> is <span class="variable">array("Middle",array(6,7,8),"High",array(9,10,11,12))</span>,<br /> <br /> <span class="variable">{{ value|unordered_list }}</span><br /> <br /> would output<br /> <br /> <code>&lt;li&gt;Middle&lt;/li&gt; &lt;li&gt; &lt;ul&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;High&lt;/li&gt; &lt;li&gt; &lt;ul&gt; &lt;li&gt;9&lt;/li&gt; &lt;li&gt;10&lt;/li&gt; &lt;li&gt;11&lt;/li&gt; &lt;li&gt;12&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;</code> </div> <hr /> <a id="upper"></a><h2>upper</h2> Capitalizes all characters in the input string. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Pjango is fun!"|upper }}</span> outputs <span class="variable">"PJANGO IS FUN!"</span>. </div> <hr /> <a id="urlize"></a><h2>urlize</h2> Converts certain links in the input string into anchored links.<br /> <br /> Links must begin with <code>http://</code>, <code>https://</code>, or <code>www.</code>.<br /> <br /> Alternatively, links with original top-level domains (<span class="variable">.com</span>, <span class="variable">.edu</span>, <span class="variable">.gov</span>, <span class="variable">.int</span>, <span class="variable">.mil</span>, <span class="variable">.net</span>, and <span class="variable">.org</span>) will also be converted. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Google: http://google.com goo.gl"|urlize }}</span> outputs<br /> <br /> <code>Google: &lt;a href="http://google.com"&gt;http://google.com&lt;/a&gt; goo.gl</code> </div> <hr /> <a id="urlizetrunc"></a><h2>urlizetrunc</h2> Works as a combination of the filters <code>urlize</code> and <code>truncatechars</code>. Does not truncate the link, only the text that is displayed as a hyperlink. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "Google: http://google.com"|urlizetrunc:15 }}</span> outputs<br /> <br /> <code>Google: &lt;a href="http://google.com"&gt;http://googl...&lt;/a&gt;</code> </div> <hr /> <a id="wordcount"></a><h2>wordcount</h2> Returns the number of words found in the input string, where a word is defined according to PHP's regular expression rules for a word and word character. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "THIS. IS. PJANGOOOO!"|wordcount }}</span> outputs <span class="variable">3</span>. </div> <hr /> <a id="wordwrap"></a><h2>wordwrap</h2> Attempts to wrap each line to have no more than the number of characters indicated by the argument while still preserving words. Extra-long words will not be broken up. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ "THIS. IS. PJANGOOOOOOO!"|wordwrap:10 }}</span> outputs<br /> <br /> <code>THIS. IS.<br /> PJANGOOOOOOO!</code> </div> <hr /> <a id="yesno"></a><h2>yesno</h2> Outputs a string based on a mapping of <span class="variable">true</span>, <span class="variable">false</span>, and optionally, <span class="variable">null</span>.<br /> <br /> The argument string should be in the format of <span class="variable">"(iftrue),(iffalse/ifnull)"</span> or <span class="variable">"(iftrue),(iffalse),(ifnull)"</span>. If no argument is provided, the default is "yes,no,maybe".<br /> <br /> Note that checks for false and null are strict equality checks. This means that <span class="variable">0</span> and the empty string will evalue to <span class="variable">true</span> for this filter. <div class="example"><h4 class="struct">Example:</h4> <span class="variable">{{ ""|yesno }}</span> outputs <span class="variable">"yes"</span>. </div> </div> </div> </body> </html>