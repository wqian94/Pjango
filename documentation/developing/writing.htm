<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Development and Documentation > Writing Documentation</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a></li><li><a href="../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a><ul><li><a href="../developing/writing.htm" class="nav highlight"" title="Writing Documentation">Documentation</a><ul style="list-style-type:disc;"><li><a href="../developing/writing.htm#pdml" class="nav" title="PDML Files">PDML Files</a></li><li><a href="../developing/writing.htm#contentblocks" class="nav" title="CONTENT Blocks">CONTENT Blocks</a></li><li><a href="../developing/writing.htm#classblocks" class="nav" title="Class Blocks">Class Blocks</a></li></ul></li><li><a href="../developing/generate.htm" class="nav" title="Generating Documentation">Generating Documentation</a></li></ul></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>Writing Documentation</h1> <hr /> Pjango's documentation is rendered using a basic engine written in PHP. This is the <span class="variable">documentationCompiler.php</span> script. Along with the script, the documentation also has its own markup language, designed specifically for writing Pjango documentation, called PDML (Pjango Documentation Markup Language). <a id="pdml"></a> <h2>PDML Files</h2> All PDML files have the <span class="variable">.pdml</span> extension, and are preceded with a "." (period). The engine then generates a <span class="variable">.txt</span> and a <span class="variable">.htm</span> for each PDML file found, based on the filename. <div class="example"><h4 class="struct">Example:</h4> A file named <span class="variable">.index.pdml</span> will generate <span class="variable">index.txt</span> and <span class="variable">index.htm</span>. </div> The PDML engine script will generate navigation menus in both the TXT and HTM files; the HTM files have a linked navigation system on the side, and the TXT files have a navigation map at the bottom of the file. This is automatically generated when the documentation is rendered. <br /> <br /> The structure of a PDML file is simple. Blocks begin with<br /> <br /> <code class="block"> &lt;&lt;&lt;BLOCKNAME </code> <br /> and end with<br /> <br /> <code class="block"> BLOCKNAME&gt;&gt;&gt; </code> <br /> There are two kinds of PDML files: standard documentation files (like this one) and class documentation files.<br /> <br /> Each standard file must have TITLE and CONTENT blocks, with an optional SHORT block. The TITLE block provides the title of the documentation page, as well as the title of the hyperlinks in the navigation, and the SHORT block is text that links to the page in the navigation. (In the TXT files, this is done as [SHORT] TITLE). If a SHORT block is not provided, it will default to the provided TITLE.<br /> <br /> The CONTENT block contains the documentation itself, and is what is displayed under the printed TITLE block on the page. More information about the CONTENT block is below.<br /> <br /> Similarly, a class documentation file has a CONTENT and an optional SHORT block, but uses a CLASS block instead of a TITLE block. A class documentation file can also have EXTENDS and IMPLMENTS blocks to indicate extended and implemented classes. Finally, a class documentation file can have STATIC_VARIABLES, VARIABLES, and FUNCTIONS blocks, with obvious contents. The display order for a class file's blocks is with CONTENT at the top, followed by STATIC VARIABLES, then VARIABLES, and finally, FUNCTIONS. <a id="contentblocks"></a> <h2>CONTENT Blocks</h2> CONTENT blocks form the core of the documentation -- within the CONTENT block is all the written documentation. By convention, &lt;h2&gt; blocks are used to indicate section headings, &lt;h3&gt; subheadings, and so on. &lt;hr /&gt; tags are also used as section dividers.<br /> <br /> Since the rendered documentation can be viewed in a browser, any and all HTML tags are valid to use. Thus, it will become necessary for you to use <span class="variable">&amp;</span> to indicate tags specifically in your documentation, such as for examples or using <span class="variable">&amp;lt;h2&amp;gt;</span> to tell others to use HTML entities. Most HTML tags will be stripped from the TXT version of the documentation.<br /> <br /> There are, however, special tags that are defined specifically for use in the documentation.<br /> <br /> <span class="variable">&lt;var&gt;</span> without any attributes is a tag block that makes the internal text monospaced.<br /> <br /> <span class="variable">&lt;code&gt;</span> will also monospace the contents of the tag, but will also render double quotes (") around the text in the TXT version of the documentation.<br /> <br /> <span class="variable">&lt;example&gt;</span> creates the green example boxes like the one below, which does not render in the TXT documentation: <div class="example"><h4 class="struct">Example:</h4></div> <span class="variable">&lt;spaces&gt;</span> will convert all spaces within the block into <span class="variable">&amp;nbsp;</span> entities.<br /> <br /> <span class="variable">&lt;iftxt&gt;</span> will only render its contents in the TXT version of the documentation.<br /> <br /> Furthermore, the <span class="variable">code</span> tags can be given the classes <span class="variable">block</span> and <span class="variable">bordered</span> to change the display style or add a border to the tag block.<br /> <br /> Finally, for some mechanics. Each line rendered in the TXT documentation should not exceed 63 characters, unless it is necessary and important to the documentation to do so. Also, every pair of empty lines (<span class="variable">\n\n</span>) will be converted to (<span class="variable">&lt;br /&gt;&lt;br /&gt;</span>), and all additional whitespace will be condensed to a single space. Finally, the <span class="variable">&amp;amp;</span>, <span class="variable">&amp;lt;</span>, <span class="variable">&amp;amp;</span>, and <span class="variable">&amp;vellip;</span> entities will be converted to their appropriate characters in the TXT version (except that the vertical ellipses will be horizontal). <a id="classblocks"></a> <h2>Class Blocks</h2> The three class blocks, STATIC_VARIABLES, VARIABLES, and FUNCTIONS, have special utilies in the class documentation.<br /> <br /> First, any <span class="variable">&lt;var&gt;</span> tags will be boldfaced in these three tags, as long as it's in a class documentation file.<br /> <br /> Second, as part of convention, variables and functions should be listed in roughly alphabetical order, which must be done manually.<br /> <br /> Third, static and instance variables should not be referred to with the preceding dollar sign ($); only function parameters and variables used in the function, excluding class static and instance variables, should have the preceding dollar sign. This is mostly to prevent confusion between the class's variables and the local variables.<br /> <br /> Finally, variable and function identifiers should be separated from their descriptions with a double-dash (<span class="variable">--</span>), and any part of the description that goes on lines past the first should be hanging-indented. See the PDML source for classes like <span class="variable">__SITE</span> for further reference. </div> </div> </body> </html>