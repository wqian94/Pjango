<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Built-in Libraries > Core > Built-in Tags, Filters, and Middleware > Tags > Built-in Tag Reference</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../../../../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../../../../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../../../../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a><ul><li><a href="../../../../lib/including.htm" class="nav" title="Including Library Files">Including Library Files</a></li><li><a href="../../../../lib/core/index.htm" class="nav" title="Core">Core</a><ul><li><a href="../../../../lib/core/constants/index.htm" class="nav" title="Pjango Built-in Constants">Constants</a></li><li><a href="../../../../lib/core/core/index.htm" class="nav" title="Core Functions">Core Functions</a></li><li><a href="../../../../lib/core/site/index.htm" class="nav" title="Site Settings">Site Settings</a></li><li><a href="../../../../lib/core/builtins/index.htm" class="nav" title="Built-in Tags, Filters, and Middleware">Tags, Filters, and Middleware</a><ul><li><a href="../../../../lib/core/builtins/filters/index.htm" class="nav" title="Filters">Filters</a></li><li><a href="../../../../lib/core/builtins/middleware/index.htm" class="nav" title="Middleware">Middleware</a></li><li><a href="../../../../lib/core/builtins/tags/index.htm" class="nav" title="Tags">Tags</a><ul><li><a href="../../../../lib/core/builtins/tags/AbstractTag.htm" class="nav" title="abstract class AbstractTag">AbstractTag</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm" class="nav highlight"" title="Built-in Tag Reference">Built-in Tags</a><ul style="list-style-type:disc;"><li><a href="../../../../lib/core/builtins/tags/builtins.htm#ajax" class="nav" title="ajax">ajax</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#autoescape" class="nav" title="autoescape">autoescape</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#block" class="nav" title="block">block</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#comment" class="nav" title="comment">comment</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#csrf_token" class="nav" title="csrf_token">csrf_token</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#css" class="nav" title="css">css</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#css_ext" class="nav" title="css_ext">css_ext</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#cycle" class="nav" title="cycle">cycle</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#extends" class="nav" title="extends">extends</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#filter" class="nav" title="filter">filter</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#firstof" class="nav" title="firstof">firstof</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#for" class="nav" title="for...empty">for...empty</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#if" class="nav" title="if...elif...else">if...elif...else</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#ifequal" class="nav" title="ifequal">ifequal</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#ifnotequal" class="nav" title="ifnotequal">ifnotequal</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#include" class="nav" title="include">include</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#js" class="nav" title="js">js</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#js_ext" class="nav" title="js_ext">js_ext</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#load" class="nav" title="load*">load*</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#now" class="nav" title="now">now</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#regroup" class="nav" title="regroup">regroup</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#replace" class="nav" title="replace">replace</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#spaceless" class="nav" title="spaceless">spaceless</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#ssi" class="nav" title="ssi">ssi</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#templatetag" class="nav" title="templatetag">templatetag</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#verbatim" class="nav" title="verbatim">verbatim</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#widthratio" class="nav" title="widthratio">widthratio</a></li><li><a href="../../../../lib/core/builtins/tags/builtins.htm#with" class="nav" title="with">with</a></li></ul></li><li><a href="../../../../lib/core/builtins/tags/customTags.htm" class="nav" title="Custom Tags">Custom Tags</a></li></ul></li></ul></li></ul></li><li><a href="../../../../lib/sql/index.htm" class="nav" title="SQL">SQL</a></li></ul></li><li><a href="../../../../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>Built-in Tag Reference</h1> <hr /> <div style="margin:1em 0;">References for the built-in tags are found below. Examples, where appropriate, may be provided. </div> <hr /> <a id="ajax"></a><h2>ajax</h2> Include the built-in AJAX library. If multiple <span class="variable">ajax</span> tags are used, only the first one will include the library, since any inclusions after that will be extraneous.<br /> <br /> The AJAX library is included as an independent block of JS, and is enclosed between its own <span class="variable">&lt;script&gt;</span> tags. If you wish to include the library inside a JS block, use the <span class="variable">inline</span> flag (<code>{% ajax inline %}</code>) to suppress the <span class="variable">&lt;script&gt;</span> tags.<br /> <br /> Note: This tag is not part of Django's built-in library. <hr /> <a id="autoescape"></a><h2>autoescape</h2> Argument must be either <span class="variable">"on"</span> or <span class="variable">"off"</span>.<br /> <br /> If on, sets the flag for autoescaping variables that do not have the safety flag attached to them from the <a href="../filters/builtins.htm#safe"><code>safe</code></a> or <a href="../filters/builtins.htm#escape"><code>escape</code></a> filters. This is done by setting the flag to be <span class="variable">true</span>.<br /> <br /> If off, sets the flag to be <span class="variable">false</span>. Will only affect children of the tag, so can be nested in itself to produce escaped and unescaped effects. <div class="example"><h4 class="struct">Example:</h4> If <span class="variable">value</span> is <span class="variable">"&lt;"</span>,<br /> <br /> <code class="block bordered"> {% autoescape on %}<br /> {{ value }}<br /> {% autoescape off %}<br /> {{ value }}<br /> {% endautoescape %}<br /> {{ value }}<br /> {{ value|safe }}<br /> {% endautoescape %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> &amp;lt;<br /> <br /> &lt;<br /> <br /> &amp;lt;<br /> &lt;<br /> <br /> </code> </div> Note that this is equivalent to applying the <code>escape</code> filter to each "unsafe" variable. <hr /> <a id="block"></a><h2>block</h2> Defines a block that can be replaced in child templates. See Django's <a href="https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance" target="_new" rel="nofollow">Template Inheritance Documentation</a> for more information. <hr /> <a id="comment"></a><h2>comment</h2> A block comment tag; everything within is not rendered at all. <hr /> <a id="csrf_token"></a><h2>csrf_token</h2> Generates and inserts a CSRF token at its location in the template. Used for CSRF protection; see <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/" target="_new" rel="nofollow">Cross Site Request Forgeries</a> in the Django documentation for more information. <hr /> <a id="css"></a><h2>css</h2> Indicates an inline-CSS block, and will automatically write <span class="variable">&lt;style&gt;</span> tags around the contents of the tag. <div class="example"><h4 class="struct">Example:</h4> Using this tag will output something like: <code class="block bordered"> &lt;style type="text/css"&gt;<br /> (contents)<br /> &lt;/style&gt; </code> </div> Note: This tag is not part of Django's built-in library. <hr /> <a id="css_ext"></a><h2>css_ext</h2> Generates text for including an external style sheet, whose link is provided in the argument. That is, the output tag will have <span class="variable"><span class="nowrap">href="(argument)"</span></span>. <div class="example"><h4 class="struct">Example:</h4> Using this tag will output something like: <code class="block bordered"> &lt;link rel="stylesheet" type="text/css" href="(argument)" /&gt; </code> </div> If more than one argument is provided, they will be concatenated together to form the final hyperlink.<br /> <br /> Note: This tag is not part of Django's built-in library. <hr /> <a id="cycle"></a><h2>cycle</h2> Cycles through the values in the argument each time the tag is encountered. These values can be either variables, strings, or numbers. <div class="example"><h4 class="struct">Example:</h4> If <span class="variable">range</span> is <span class="variable">array(0,1,2,3,4)</span>, then<br /> <br /> <code class="block bordered"> {% for i in range %}<br /> {% cycle "1" 2 %}<br /> {% endfor %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> 1<br /> <br /> 2<br /> <br /> 1<br /> <br /> 2<br /> <br /> 1<br /> <br /> </code> </div> Like with Django, you can also use the <code>as</code> directive to store the cycled values into local-scope variables. <div class="example"><h4 class="struct">Example:</h4> Same range as above,<br /> <br /> <code class="block bordered"> {% for i in range %}<br /> {% cycle "1" 2 as v silent %}<br /> {{ v }}<br /> {% cycle v %}<br /> {% endfor %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> 1<br /> 2<br /> <br /> 1<br /> 2<br /> <br /> 1<br /> 2<br /> <br /> 1<br /> 2<br /> <br /> 1<br /> 2<br /> <br /> </code> </div> As this example also shows, the <code>silent</code> directive suppresses outputting the value that is cycled through. This works even if the cycle's value isn't stored in a variable.<br /> <br /> Additionally, note that, once a cycle is anchored to a variable, future cycles can simply call <code>{% cycle (var) %}</code> to cycle through that variable again, as if that tag had been encountered again. <hr /> <a id="extends"></a><h2>extends</h2> Inherits a parent template based on the argument.<br /> <br /> If the argument is a string literal, it will be treated as the relative path location of the parent template; if it is a variable, it will first be evaluated into a string literal that represents the relative locaation of the parent template.<br /> <br /> Note: This tag must be the first tag in the template file, or else inheritance is not guaranteed to work correctly.<br /> <br /> See Django's <a href="https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance" target="_new" rel="nofollow">Template Inheritance Documentation</a> for more information. <hr /> <a id="filter"></a><h2>filter</h2> Applies the filter(s) to the contents of the tag. Like with variables, filters can be piped through each other. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% filter lower|capfirst %}<br /> I PJANGO ALL DAY!<br /> {% endfilter %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> I pjango all day!<br /> <br /> </code> </div> <hr /> <a id="firstof"></a><h2>firstof</h2> Prints the first variable argument that is not <span class="variable">0</span>, <span class="variable">false</span>, or the empty string (essentially prints first <span class="variable">true</span> variable argument). This means that variables that have not been defined yet, which loosely evaluates to <span class="variable">false</span>, will also be skipped.<br /> <br /> It is also possible to provide a "fallback" string, which will be used if nothing before it is used. This string must be in string literals (i.e. between double quotes). <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% firstof var1 var2 var3 "fallback" %} </code> <br /> is equivalent to<br /> <br /> <code class="block bordered"> {% if var1 %}<br /> {{ var1 }}<br /> {% elif var2 %}<br /> {{ var2 }}<br /> {% elif var3 %}<br /> {{ var3 }}<br /> {% else %}<br /> fallback<br /> {% endif %} </code> </div> <hr /> <a id="for"></a><h2>for...empty</h2> Loops over each element in the array, which can be either associative or a list. Syntax is Python-style, and filtering the array is permitted, provided that the final result is also an array. <div class="example"><h4 class="struct">Example:</h4> Displaying the elements of a list called <code>lang_list</code>:<br /> <br /> <code class="block bordered"> {% for lang in lang_list %}<br /> {{ lang }}<br /> {% endfor %} </code> <br /> The iteration order can be reversed using the <code>reversed</code> directive:<br /> <br /> <code class="block bordered">{% for obj in list reversed %}</code> <br /> If your array contains array elements, you can unpack them by using comma-separated identifiers:<br /> <br /> <code class="block bordered">{% for obj1,obj2,obj3 in list %}</code> <br /> Take care not to put spaces around the commas separating the identifiers; any spaces will be treated as argument delimiters, and the framework will throw an error.<br /> <br /> Similarly, you can also access key-value pairs in associative arrays by appending the flag <span class="variable">".items"</span> to the array identifier:<br /> <br /> <code class="block bordered">{% for key,value in array.items %}</code> <br /> Again, take care not to include spaces between the array name and <span class="variable">".items"</span>, as they will be interpreted differently.<br /> <br /> It is also possible to specify some text to be displayed if the array is empty by using the <span class="variable">{% empty %}</span> tag:<br /> <br /> <code class="block bordered"> {% for lang in lang_list %}<br /> {{ lang }}<br /> {% empty %}<br /> No languages!<br /> {% endfor %} </code> <br /> The for loop also sets some variables specific to the for loop. These are all accessed as if they were elements of an array called <code>forloop</code>.<br /> <br /> <span class="variable">forloop.counter</span> -- The current iteration of the loop (1-indexed).<br /> <span class="variable">forloop.counter0</span> -- The current iteration of the loop (0-indexed).<br /> <span class="variable">forloop.revcounter</span> -- The number of iterations counting from the end of the loop (1-indexed).<br /> <span class="variable">forloop.revcounter0</span> -- The number of iterations counting from the end of the loop (0-indexed).<br /> <span class="variable">forloop.first</span> -- Evalutes to <code>true</code> if this is the first iteration through the loop.<br /> <span class="variable">forloop.last</span> -- Evalutes to <code>true</code> if this is the last iteration through the loop.<br /> <span class="variable">forloop.parentloop</span> -- References the variables in the parent loop, if the current loop is nested. Defaults to <code>null</code> if there is no parent loop. </div> <hr /> <a id="if"></a><h2>if...elif...else</h2> Sets conditional blocks; syntax is Python-like, and filters are permitted on the arguments. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% if var %} </code> <br /> Will evaluate to a <code>true</code> conditional if <code>var</code> exists, and is not equivalent to <code>false</code> (i.e. not <span class="variable">0</span>, <span class="variable">false</span>, or <span class="variable">""</span>).<br /> <br /> Additionally, the operators <span class="variable">not</span>, <span class="variable">and</span>, <span class="variable">or</span>, <span class="variable">in</span>, <span class="variable">==</span>, <span class="variable">!=</span>, <span class="variable">===</span>, <span class="variable">!==</span>, <span class="variable">&gt;</span>, <span class="variable">&lt;</span>, <span class="variable">&gt;=</span>, and <span class="variable">&lt;=</span> can be used to form more complex boolean expressions.<br /> <br /> If you wish to form complex operations involving group, set the parentheses apart from the text around it, e.g.<br /> <br /> <code class="block bordered"> {% if var1 and ( not ( var2 or not var3 ) ) %} </code> <br /> An <span class="variable">elif</span> tag can be used inside an <span class="variable">if</span>-block, provided that it is before an <span class="variable">else</span> tag.<br /> <br /> An <span class="variable">else</span> tag can be used inside an <span class="variable">if</span>-block, but only if it is the last <span class="variable">if-elif-else</span> tag in the block. The <span class="variable">if</span>-block should be ended right after the contents of the <span class="variable">else</span> tag.<br /> <br /> A generic <span class="variable">if-elif-else</span> block:<br /> <br /> <code class="block bordered"> {% if conditional1 %}<br /> (contents1)<br /> {% elif conditional2 %}<br /> (contents2)<br /> {% elif conditional3 %}<br /> (contents3)<br /> &vellip;<br /> {% else %}<br /> (else contents)<br /> {% endif %} </code> </div> <hr /> <a id="ifequal"></a><h2>ifequal</h2> A macro taking two arguments. Equivalent to <code>{% if arg1 == arg2 %}</code><br /> <br /> As with normal conditionals, filters are permitted.<br /> <br /> Furthermore, the tag can also have an <code>else</code> tag associated with it, but not <code>elif</code> tags. <hr /> <a id="ifnotequal"></a><h2>ifnotequal</h2> A macro taking two arguments. Equivalent to <code>{% if arg1 != arg2 %}</code><br /> <br /> As noted above, filters are permitted, and the tag can also have an <code>else</code> tag associated with it, but not <code>elif</code> tags. <hr /> <a id="include"></a><h2>include</h2> Includes another template file at the tag's location in the current template. As with <code>extends</code>, the argument can be either a string literal or a variable, but must be the path to the other template.<br /> <br /> Unlike Django's version of this tag, Pjango's does not allow the <code>with</code> directive for customizing the variables to be used in the included template. <hr /> <a id="js"></a><h2>js</h2> Indicates a JavaScript block, and will insert the rendered contents of the tag between appropriate <span class="variable">&lt;script&gt;</span> tags. <div class="example"><h4 class="struct">Example:</h4> The output will resemble: <code class="block bordered"> &lt;script type="text/javascript"&gt;/*&lt;!--*/<br /> (contents)<br /> /*--&gt;*/&lt;/script&gt; </code> </div> Note: This tag is not part of Django's built-in library. <hr /> <a id="js_ext"></a><h2>js_ext</h2> Outputs text to include the JavaScript file based on the path provided in the argument. <div class="example"><h4 class="struct">Example:</h4> The output will resemble: <code class="block bordered"> &lt;script src="(argument)"&gt;&lt;/script&gt; </code> </div> If more than one argument is provided, they will be concatenated together to form the final hyperlink.<br /> <br /> Note: This tag is not part of Django's built-in library. <hr /> <a id="load"></a><h2>load</h2> It should be noted, first of all, that Pjango does <span class="italic">not</span> have this tag built-in; however, its inclusion here is to notify users to the alternative.<br /> <br /> Instead of including libraries on the "client side", the custom libraries should be included server-side in the PHP file, as this will appropriately register the tags and filters. This is Pjango's alternative to the <code>load</code> tag.<br /> <br /> While this takes away from the client-side, it also introduces more flexibility with different versions of tags and filters, since the decision is now made server-side. <hr /> <a id="now"></a><h2>now</h2> Formats the current server time according to the format in the argument. See <a href="http://php.net/date">http://php.net/date</a> for specifier information. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered">The {% now "jS o\f F, Y" %}</code> <br /> Might output <span class="variable">"The 18th of July, 2013"</span>. </div> <hr /> <a id="regroup"></a><h2>regroup</h2> Regroups a list of associative arrays based on equality of values of the key given in the argument. Syntactically, this is used as <code>{% regroup (list) by (keyname) as (varname) %}</code>, where <span class="variable">list</span> is the list being regrouped, <span class="variable">keyname</span> is a non-literal of the key being used (e.g. <span class="variable">key</span> instead of <span class="variable">"key"</span>), and <span class="variable">varname</span> is the variable that will store the regrouped list. <hr /> <a id="replace"></a><h2>replace</h2> A tag not in Djagno's built-in library, this replaces all instances of the first argument with the second argument in the final rendered text. The arguments can be variables. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% replace var1 "choo" %}<br /> {{ var1 }}, {{ var1 }}!<br /> {% endreplace %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> choo, choo!<br /> <br /> </code> </div> <hr /> <a id="spaceless"></a><h2>spaceless</h2> Removes extraneous whitespace between tags, but not inside them as contents. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% spaceless %}<br /> &lt;div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;&nbsp;&nbsp;&nbsp;&nbsp;TEXT&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h2&gt;&lt;/div&gt;<br /> {% endspaceless %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> &lt;div&gt;&lt;h2&gt;&nbsp;&nbsp;&nbsp;&nbsp;TEXT&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h2&gt;&lt;/div&gt;<br /> <br /> </code> </div> <hr /> <a id="ssi"></a><h2>ssi</h2> Includes the contents of the file given as the argument at the tag's location in the template. The argument can be a variable or a string literal, and if a second argument is given as <span class="variable">parsed</span>, then the file will be rendered as a template, and its rendered output inserted instead. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% ssi external_file_path parsed %} </code> </div> <hr /> <a id="templatetag"></a><h2>templatetag</h2> Prints strings used for template tags and filters. This is compensation for the inability fo escape special characters in the template.<br /> <br /> <span class="variable">{%</span> -- <span class="variable">openblock</span><br /> <span class="variable">%}</span> -- <span class="variable">closeblock</span><br /> <span class="variable">{{</span> -- <span class="variable">openvariable</span><br /> <span class="variable">}}</span> -- <span class="variable">closevariable</span><br /> <span class="variable">{</span> -- <span class="variable">openbrace</span><br /> <span class="variable">}</span> -- <span class="variable">closebrace</span><br /> <span class="variable">{#</span> -- <span class="variable">opencomment</span><br /> <span class="variable">#}</span> -- <span class="variable">closecomment</span> <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered">{% templatetag openblock %}</code> <br /> outputs<br /> <br /> <code class="block bordered">{%</code> </div> <hr /> <a id="verbatim"></a><h2>verbatim</h2> Outputs the contents of this tag without rendering any special tags, variables, etc.<br /> <br /> Including an argument gives the tag a name, which only a corresponding end tag with the same name can close. <div class="example"><h4 class="struct">Example:</h4> <code class="block bordered"> {% verbatim %}<br /> {{ var }}<br /> {% endverbatim %}<br /> {% verbatim block %}<br /> {% endverbatim %}<br /> {% endverbatim block %} </code> <br /> outputs<br /> <br /> <code class="block bordered"> <br /> {{ var }}<br /> <br /> <br /> {% endverbatim %}<br /> <br /> </code> </div> <hr /> <a id="widthratio"></a><h2>widthratio</h2> Scales numbers based on a calculated ratio.<br /> <br /> Taking exactly three arguments, the tag has the general syntax: <code>{% widthratio curr_value max_value max_width %}</code>, which will replace the tag with the value <span class="variable">curr_value/max_value*max_width</span>, using floats. <hr /> <a id="with"></a><h2>with</h2> Caches a local variable with a certain value. There are two syntaxes associated with this tag.<br /> <br /> <code>{% with var1=val1 var2=val2 ... %}</code> will set the indicated values to variables with the name as given. This can locally change the value of a preexisting variable, but only within the scope of the tag (i.e. within the tag).<br /> <br /> An older syntax in Django, which is backsupported here, only allows the assignment of one variable at a time, with the syntax <code>{% with (varname) as (value) %}</code>. </div> </div> </body> </html>