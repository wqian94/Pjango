<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Built-in Libraries > Core > Site Settings > class __SITE</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../../../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../../../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../../../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a><ul><li><a href="../../../lib/including.htm" class="nav" title="Including Library Files">Including Library Files</a></li><li><a href="../../../lib/core/index.htm" class="nav" title="Core">Core</a><ul><li><a href="../../../lib/core/core/index.htm" class="nav" title="Core Functions">Core Functions</a></li><li><a href="../../../lib/core/site/index.htm" class="nav" title="Site Settings">Site Settings</a><ul><li><a href="../../../lib/core/site/__SITE.htm" class="nav highlight"" title="class __SITE">__SITE Class and Object</a></li></ul></li><li><a href="../../../lib/core/builtins/index.htm" class="nav" title="Built-in Tags, Filters, and Middleware">Tags, Filters, and Middleware</a></li></ul></li><li><a href="../../../lib/sql/index.htm" class="nav" title="SQL">SQL</a></li></ul></li><li><a href="../../../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>class __SITE</h1> <hr /> The main structure used for storing the site's settings, the <span class="variable">__SITE</span> class contains only static variables and functions, to eliminate the need to declare an instance of the class. This prevents the accidental deletion of the instance, or access otherwise that could destroy the entire infrastructure of this framework.<br /> <br /> As such, all of the functions should be accessed using<br /> <br /> <code>__SITE::function_name(arguments...)</code><br /> <br /> This class's static variables have protected scope, so they cannot be accessed from outside the class. If you absolutely must manipulate something during runtime, you may declare a subclass of <span class="variable">__SITE</span> and use that to manipulate the variables that exist in <span class="variable">__SITE</span>.<br /> <br /> Be advised, however, that nothing in <code>site.php</code> should be modified, as unexpected results may happen. Instead, use the <code>settings.php</code> file in the library root <code>lib/</code> to apply your settings. <h3>Static Variables</h3> <span class="boldVariable">protected filters</span> -- Initialized as an empty array, it stores the names-classname pairs of filters as <code>key=>value</code> pairs in the array.<br /> <br /> <span class="boldVariable">protected middleware</span> -- Initialized as an empty array, it stores the priority-classname pairs as key and value, respectively. During execution, middleware associated with larger priority keys are executed before those associated with smaller priority keys.<br /> <br /> All middleware should be included at once, in appropriate order, in <code>settings.php</code>. There should be no calls to add or remove any middleware after the one in <code>settings.php</code>.<br /> <br /> <span class="boldVariable">protected tags</span> -- Initialized as an empty array, it stores the names-classname pairs of all tags as <code>key=>value</code> pairs in the array.<br /> <br /> <span class="boldVariable">protected unclosed_tags</span> -- Initialized as an empty array, it stores the names of all tags that have no associated closing tag as <code>key=>value</code> pairs in the array. That is, these tags are self-closing.<br /> <br /> <span class="boldVariable">protected unclosed_content_tags</span> -- Initialized as an empty array, it stores the names of all tags that are part of another tag, e.g. <span class="boldVariable">elif</span>, as key=>value pairs in the array. This allows these tags to have child components, but are ended with an endtag that does not correspond to their own classnames.<br /> <br /> <span class="boldVariable">protected vars</span> -- Initialized as an array, it stores the variables to be used in the template files by associating the variable name to its value as <code>key=>value</code> pairs. Essentially, these are the system globals within the context of the framework. <h3>Functions</h3> <span class="boldVariable">static addFilter($name,$obj)</span> -- Registers a filter with the <span class="boldVariable">__SITE</span> class. <span class="boldVariable">$name</span> is the name of the filter, and <span class="boldVariable">$obj</span> is an instance of the class to associate.<br /> <br /> <span class="boldVariable">static addTag($name,$obj,$unclosed=false,$content=false)</span> -- Registers a tag with the <span class="boldVariable">__SITE</span> class. <span class="boldVariable">$name</span> is the name of the tag, <span class="boldVariable">$obj</span> is an instance of the class to use, <span class="boldVariable">$unclosed</span> indicates whether the tag should be self-closing (default is <span class="boldVariable">false</span>), and <span class="boldVariable">$content</span> indicates whether a self-closing tag should be allowed to have child components (default is <span class="boldVariable">false</span>). Note that if <span class="boldVariable">$unclosed</span> is <span class="boldVariable">false</span>, setting <span class="boldVariable">$content</span> will have no effect.<br /> <br /> <span class="boldVariable">static addMiddleware($m)</span> -- <span class="boldVariable">$m</span> is an associative array, with keys as priority values and values as the middleware classnames. Middleware with larger priority values are applied before those with smaller priority values.<br /> <br /> Note: This function should only be called once.<br /> <br /> <span class="boldVariable">static addVars($v)</span> -- <span class="boldVariable">$v</span> is an associative array, with keys as variable names and values as the variable values.<br /> <br /> <span class="boldVariable">static execFilter($name,$args,$str,&$vars)</span> -- Calls the <span class="boldVariable">call_render()</span> function of the class associated with the filter name <span class="boldVariable">$name</span>, which subsequently calls its <span class="boldVariable">render($args,$var,$vars)</span> function. This <span class="boldVariable">render</span> function must be static to the class, which in turn must extend from the <span class="boldVariable">AbstractFilter</span> class. <span class="boldVariable">$args</span> is the array of all arguments passed into the filter, <span class="boldVariable">$str</span> is the string to apply the filter to, and <span class="boldVariable">$vars</span> is the array containing the system globals at that point in execution, which may include introduced variables, such as loop variables in a for-loop. Since <span class="boldVariable">$vars</span> is passed in by reference, the filter has the capability to access the system variables by reference as well.<br /> <br /> <span class="boldVariable">static execMiddleware($rendered)</span> -- Calls the <span class="boldVariable">render($text)</span> functions of the registered middleware classes. Classes are called in decreasing order of priority, which is based on the value of the keys associated with the classnames of each middleware in the <span class="boldVariable">middlewares</span> static variable.<br /> <br /> <span class="boldVariable">static execTag($name,$args,$comp,&$vars)</span> -- Calls the <span class="boldVariable">call_render()</span> function of the class associated with the tag name <span class="boldVariable">$name</span>, which subsequently calls its own <span class="boldVariable">render($args,$c,$vars)</span> function. This <span class="boldVariable">render</span> function must be static to the class, which in turn must extend from the <span class="boldVariable">AbstractTag</span> class. <span class="boldVariable">$args</span> is the array containing the arguments of the tag, <span class="boldVariable">$comp</span> contains the child components of the tag, and <span class="boldVariable">$vars</span> contains the system global variables at that point in execution. This may or may not include introduced variables, such as loop variables if within a for-loop. Since <span class="boldVariable">$vars</span> is passed in by reference, the tag has the capability to access the system variables by reference as well.<br /> <br /> <span class="boldVariable">static get()</span> -- Returns a direct copy of the system globals as stored in the <span class="boldVariable">__SITE</span> class.<br /> <br /> <span class="boldVariable">static getTagNames()</span> -- Returns an array containing all tag names.<br /> <br /> <span class="boldVariable">static getUnclosedTagNames()</span> -- Returns an array containing only the tag names of tags that are self-closing and do not have child components.<br /> <br /> <span class="boldVariable">static getUnclosedContentTagNames()</span> -- Returns an array containing only the tag names of tags that are self-closing and can have child components.<br /> <br /> <span class="boldVariable">static preprocess()</span> -- Runs the <span class="boldVariable">preprocess()</span> static functions of the middleware that is installed, in forward ordering of the keys, as opposed to backwards in executing the middleware.<br /> <br /> <span class="boldVariable">static refactor()</span> -- Ensures all <span class="boldVariable">PATH</span> variables end with <span class="boldVariable">/</span>, and that all views are absolute paths. This modifies these variables as stored in the <span class="boldVariable">__SITE</span> class.<br /> <br /> <span class="boldVariable">static set()</span> -- Sets the internally stored system globals as actual global variables, prepended with <span class="boldVariable">__</span>. E.g. <span class="boldVariable">$__PATH</span>. </div> </div> </body> </html>