Built-in Tag Reference
======================

References for the built-in tags are found below. Examples,
where appropriate, may be provided.
 
===============================================================

ajax

Include the built-in AJAX library. If multiple ajax tags are
used, only the first one will include the library, since any
inclusions after that will be extraneous.

The AJAX library is included as an independent block of JS, and
is enclosed between its own <script> tags. If you wish to
include the library inside a JS block, use the inline flag
("{% ajax inline %}") to suppress the <script> tags.

Note: This tag is not part of Django's built-in library.
===============================================================

autoescape

Argument must be either "on" or "off".

If on, sets the flag for autoescaping variables that do not
have the safety flag attached to them from the "safe" or
"escape" filters. This is done by setting the flag to be true.

If off, sets the flag to be false. Will only affect children of
the tag, so can be nested in itself to produce escaped and
unescaped effects.

Example:
If value is "<",

"
{% autoescape on %}
{{ value }}
{% autoescape off %}
{{ value }}
{% endautoescape %}
{{ value }}
{{ value|safe }}
{% endautoescape %}
"

outputs

"

&lt;

<

&lt;
<

"

Note that this is equivalent to applying the "escape" filter to
each "unsafe" variable.
===============================================================

block

Defines a block that can be replaced in child templates. See
Django's Template Inheritance Documentation for more
information.
===============================================================

comment

A block comment tag; everything within is not rendered at all.
===============================================================

csrf_token

Generates and inserts a CSRF token at its location in the
template. Used for CSRF protection; see Cross Site Request
Forgeries in the Django documentation for more information.
===============================================================

css

Indicates an inline-CSS block, and will automatically write
<style> tags around the contents of the tag.

Example:
Using this tag will output something like:
"
<style type="text/css">
(contents)
</style>
"

Note: This tag is not part of Django's built-in library.
===============================================================

css_ext

Generates text for including an external style sheet, whose
link is provided in the argument. That is, the output tag will
have href="(argument)".

Example:
Using this tag will output something like:
"
<link rel="stylesheet" type="text/css" href="(argument)" />
"

If more than one argument is provided, they will be
concatenated together to form the final hyperlink.

Note: This tag is not part of Django's built-in library.
===============================================================

cycle

Cycles through the values in the argument each time the tag is
encountered. These values can be either variables, strings, or
numbers.

Example:
If range is array(0,1,2,3,4), then

"
{% for i in range %}
{% cycle "1" 2 %}
{% endfor %}
"

outputs

"

1

2

1

2

1

"

Like with Django, you can also use the "as" directive to store
the cycled values into local-scope variables.

Example:
Same range as above,

"
{% for i in range %}
{% cycle "1" 2 as v silent %}
{{ v }}
{% cycle v %}
{% endfor %}
"

outputs

"

1
2

1
2

1
2

1
2

1
2

"

As this example also shows, the "silent" directive suppresses
outputting the value that is cycled through. This works even if
the cycle's value isn't stored in a variable.

Additionally, note that, once a cycle is anchored to a
variable, future cycles can simply call "{% cycle (var) %}" to
cycle through that variable again, as if that tag had been
encountered again.
===============================================================

extends

Inherits a parent template based on the argument.

If the argument is a string literal, it will be treated as the
relative path location of the parent template; if it is a
variable, it will first be evaluated into a string literal that
represents the relative locaation of the parent template.

Note: This tag must be the first tag in the template file, or
else inheritance is not guaranteed to work correctly.

See Django's Template Inheritance Documentation for more
information.
===============================================================

filter

Applies the filter(s) to the contents of the tag. Like with
variables, filters can be piped through each other.

Example:
"
{% filter lower|capfirst %}
I PJANGO ALL DAY!
{% endfilter %}
"

outputs

"

I pjango all day!

"

===============================================================

firstof

Prints the first variable argument that is not 0, false, or the
empty string (essentially prints first true variable argument).
This means that variables that have not been defined yet, which
loosely evaluates to false, will also be skipped.

It is also possible to provide a "fallback" string, which will
be used if nothing before it is used. This string must be in
string literals (i.e. between double quotes).

Example:
"
{% firstof var1 var2 var3 "fallback" %}
"

is equivalent to

"
{% if var1 %}
{{ var1 }}
{% elif var2 %}
{{ var2 }}
{% elif var3 %}
{{ var3 }}
{% else %}
fallback
{% endif %}
"

===============================================================

for...empty

Loops over each element in the array, which can be either
associative or a list. Syntax is Python-style, and filtering
the array is permitted, provided that the final result is also
an array.

Example:
Displaying the elements of a list called "lang_list":

"
{% for lang in lang_list %}
{{ lang }}
{% endfor %}
"

The iteration order can be reversed using the "reversed"
directive:

"{% for obj in list reversed %}"

If your array contains array elements, you can unpack them by
using comma-separated identifiers:

"{% for obj1,obj2,obj3 in list %}"

Take care not to put spaces around the commas separating the
identifiers; any spaces will be treated as argument delimiters,
and the framework will throw an error.

Similarly, you can also access key-value pairs in associative
arrays by appending the flag ".items" to the array identifier:

"{% for key,value in array.items %}"

Again, take care not to include spaces between the array name
and ".items", as they will be interpreted differently.

It is also possible to specify some text to be displayed if the
array is empty by using the {% empty %} tag:

"
{% for lang in lang_list %}
{{ lang }}
{% empty %}
No languages!
{% endfor %}
"

The for loop also sets some variables specific to the for loop.
These are all accessed as if they were elements of an array
called "forloop".

forloop.counter
  -- The current iteration of the loop (1-indexed).
forloop.counter0
  -- The current iteration of the loop (0-indexed).
forloop.revcounter
  -- The number of iterations counting from the end of the loop
     (1-indexed).
forloop.revcounter0
  -- The number of iterations counting from the end of the loop
     (0-indexed).
forloop.first
  -- Evalutes to "true" if this is the first iteration through
     the loop.
forloop.last
  -- Evalutes to "true" if this is the last iteration through
     the loop.
forloop.parentloop
  -- References the variables in the parent loop, if the
     current loop is nested. Defaults to "null" if there is no
     parent loop.

===============================================================

if...elif...else

Sets conditional blocks; syntax is Python-like, and filters are
permitted on the arguments.

Example:
"
{% if var %}
"

Will evaluate to a "true" conditional if "var" exists, and is
not equivalent to "false" (i.e. not 0, false, or "").

Additionally, the operators not, and, or, in, ==, !=, ===, !==,
>, <, >=, and <= can be used to form more complex boolean
expressions.

If you wish to form complex operations involving group, set the
parentheses apart from the text around it, e.g.

"
{% if var1 and ( not ( var2 or not var3 ) ) %}
"

An elif tag can be used inside an if-block, provided that it is
before an else tag.

An else tag can be used inside an if-block, but only if it is
the last if-elif-else tag in the block. The if-block should be
ended right after the contents of the else tag.

A generic if-elif-else block:

"
{% if conditional1 %}
(contents1)
{% elif conditional2 %}
(contents2)
{% elif conditional3 %}
(contents3)
...
{% else %}
(else contents)
{% endif %}
"

===============================================================

ifequal

A macro taking two arguments. Equivalent to
"{% if arg1 == arg2 %}"

As with normal conditionals, filters are permitted.

Furthermore, the tag can also have an "else" tag associated
with it, but not "elif" tags.
===============================================================

ifnotequal

A macro taking two arguments. Equivalent to
"{% if arg1 != arg2 %}"

As noted above, filters are permitted, and the tag can also
have an "else" tag associated with it, but not "elif" tags.
===============================================================

include

Includes another template file at the tag's location in the
current template. As with "extends", the argument can be either
a string literal or a variable, but must be the path to the
other template.

Unlike Django's version of this tag, Pjango's does not allow
the "with" directive for customizing the variables to be used
in the included template.
===============================================================

js

Indicates a JavaScript block, and will insert the rendered
contents of the tag between appropriate <script> tags.

Example:
The output will resemble:
"
<script type="text/javascript">/*<!--*/
(contents)
/*-->*/</script>
"

Note: This tag is not part of Django's built-in library.
===============================================================

js_ext

Outputs text to include the JavaScript file based on the path
provided in the argument.

Example:
The output will resemble:
"
<script src="(argument)"></script>
"

If more than one argument is provided, they will be
concatenated together to form the final hyperlink.

Note: This tag is not part of Django's built-in library.
===============================================================

load

It should be noted, first of all, that Pjango does not have
this tag built-in; however, its inclusion here is to notify
users to the alternative.

Instead of including libraries on the "client side", the custom
libraries should be included server-side in the PHP file, as
this will appropriately register the tags and filters. This is
Pjango's alternative to the "load" tag.

While this takes away from the client-side, it also introduces
more flexibility with different versions of tags and filters,
since the decision is now made server-side.
===============================================================

now

Formats the current server time according to the format in the
argument. See http://php.net/date for specifier information.

Example:
"The {% now "jS o\f F, Y" %}"

Might output "The 18th of July, 2013".

===============================================================

regroup

Regroups a list of associative arrays based on equality of
values of the key given in the argument. Syntactically, this is
used as "{% regroup (list) by (keyname) as (varname) %}",
where list is the list being regrouped, keyname is a
non-literal of the key being used (e.g. key instead of "key"),
and varname is the variable that will store the regrouped list.
===============================================================

replace

A tag not in Djagno's built-in library, this replaces all
instances of the first argument with the second argument in the
final rendered text. The arguments can be variables.

Example:
"
{% replace var1 "choo" %}
{{ var1 }}, {{ var1 }}!
{% endreplace %}
"

outputs

"

choo, choo!

"

===============================================================

spaceless

Removes extraneous whitespace between tags, but not inside them
as contents.

Example:
"
{% spaceless %}
<div>    <h2>    TEXT    </h2></div>
{% endspaceless %}
"

outputs

"

<div><h2>    TEXT    </h2></div>

"

===============================================================

ssi

Includes the contents of the file given as the argument at the
tag's location in the template. The argument can be a variable
or a string literal, and if a second argument is given as
parsed, then the file will be rendered as a template, and its
rendered output inserted instead.

Example:
"
{% ssi external_file_path parsed %}
"

===============================================================

templatetag

Prints strings used for template tags and filters. This is
compensation for the inability fo escape special characters in
the template.

{% -- openblock
%} -- closeblock
{{ -- openvariable
}} -- closevariable
{ -- openbrace
} -- closebrace
{# -- opencomment
#} -- closecomment

Example:
"{% templatetag openblock %}"

outputs

"{%"

===============================================================

verbatim

Outputs the contents of this tag without rendering any special
tags, variables, etc.

Including an argument gives the tag a name, which only a
corresponding end tag with the same name can close.

Example:
"
{% verbatim %}
{{ var }}
{% endverbatim %}
{% verbatim block %}
{% endverbatim %}
{% endverbatim block %}
"

outputs

"

{{ var }}


{% endverbatim %}

"

===============================================================

widthratio

Scales numbers based on a calculated ratio.

Taking exactly three arguments, the tag has the general syntax:
"{% widthratio curr_value max_value max_width %}", which will
replace the tag with the value curr_value/max_value*max_width,
using floats.
===============================================================

with

Caches a local variable with a certain value. There are two
syntaxes associated with this tag.

"{% with var1=val1 var2=val2 ... %}" will set the indicated
values to variables with the name as given. This can locally
change the value of a preexisting variable, but only within the
scope of the tag (i.e. within the tag).

An older syntax in Django, which is backsupported here, only
allows the assignment of one variable at a time, with the
syntax "{% with (varname) as (value) %}".

==========
NAVIGATION
==========
-[Home] Pjango Documentation (index.)
---[Installation] Installation Guide (index.)
---[Libraries] Built-in Libraries (index.)
-----[Including Library Files] Including Library Files
       (including.)
-----[Core] Core (index.)
-------[Core Functions] Core Functions (index.)
-------[Site Settings] Site Settings (index.)
-------[Tags, Filters, and Middleware] Built-in Tags, Filters,
         and Middleware (index.)
---------[Filters] Filters (index.)
-----------[AbstractFilter] abstract class AbstractFilter
             (AbstractFilter.)
-----------[Built-in Filters] Built-in Filter Reference
             (builtins.)
-----------[Custom Filters] Custom Filters (customFilters.)
---------[Middleware] Middleware (index.)
-----------[AbstractMiddleware] abstract class
             AbstractMiddleware (AbstractMiddleware.)
-----------[Built-in Middleware] Built-in Middleware Reference
             (builtins.)
-----------[Custom Middleware] Custom Middleware
             (customMiddleware.)
---------[Tags] Tags (index.)
-----------[AbstractTag] abstract class AbstractTag
             (AbstractTag.)
==========>[Built-in Tags] Built-in Tag Reference (builtins.)
-----------[Custom Tags] Custom Tags (customTags.)
-----[SQL] SQL (index.)
---[Writing Software] Development and Documentation (index.)
