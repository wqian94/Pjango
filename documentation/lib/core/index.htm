<!DOCTYPE html> <html> <head> <title>Pjango Documentation > Built-in Libraries > Core</title> <link rel="stylesheet" type="text/css" href="/home/wqian94/Pjango/documentation/style.css" /> </head> <body> <div style="overflow:hidden;width:0;height:0;">&nbsp;</div> <div class="nav" style="position:fixed;z-index:100;width:251px;height:100%;overflow:auto;border-right:5px ridge black;"> <div class="desc" style="padding:1em 0 0 1em;"> <a href="../../index.htm" class="nav" title="Pjango Documentation">Home</a><ul><li><a href="../../installation/index.htm" class="nav" title="Installation Guide">Installation</a></li><li><a href="../../lib/index.htm" class="nav" title="Built-in Libraries">Libraries</a><ul><li><a href="../../lib/including.htm" class="nav" title="Including Library Files">Including Library Files</a></li><li><a href="../../lib/core/index.htm" class="nav highlight"" title="Core">Core</a><ul><li><a href="../../lib/core/constants/index.htm" class="nav" title="Pjango Built-in Constants">Constants</a></li><li><a href="../../lib/core/core/index.htm" class="nav" title="Core Functions">Core Functions</a></li><li><a href="../../lib/core/site/index.htm" class="nav" title="Site Settings">Site Settings</a></li><li><a href="../../lib/core/builtins/index.htm" class="nav" title="Built-in Tags, Filters, and Middleware">Tags, Filters, and Middleware</a></li></ul></li><li><a href="../../lib/sql/index.htm" class="nav" title="SQL">SQL</a></li></ul></li><li><a href="../../developing/index.htm" class="nav" title="Development and Documentation">Writing Software</a></li></ul> </div> </div> <div style="margin-left:256px;padding-left:5px;padding-right:1em;overflow:auto;"> <div> <h1>Core</h1> <hr /> This is the directory containing the bulk of the processing and rendering components. Most notably, the __SITE, View, and Token classes, and the AbstractComponent abstract and subclasses (TagComponent, ValComponent, TxtComponent, RootComponent) are declared in this sublibrary. The __SITE class is contained in <a href="site/index.htm">site.php</a>, and the remaining classes are in <a href="core/index.htm">core.php</a>.<br /> <br /> Briefly, the system works as follows. During construction of each page on the server, middleware, tags, and filters are registered in the __SITE class, which is fully static. Then, Upon requesting to render a template string, it is parsed into tokens represented by the Token class, by the View class. Each Token is then converted into an AbstractComponent subclass, based solely on its content -- namely, the first two characters. From here, the View class does a preliminary check to make sure that tags are properly closed, and concurrently generates a tree structure representing the relative depths of the different components. Exceptions are made for special tags that require attention at this step; most notably, <span class="variable">verbatim</span>, which requires its closing tag to behave as a normal tag. Finally, the root element -- the RootComponent the encompasses all the internal components -- is given the call to render.<br /> <br /> Upon receiving the call to render, the root element iterates through each child component and recursively calls upon their <span class="variable">render()</span> functions. Each component's rendering behavior is different from the others, but their return values are all the same -- the string that was generated to represent the content within that component. The root element does simple string concatenation of its children, and stores it in the private instance variable <span class="variable">rendered</span>. Subsequent calls to <span class="variable">getRendered()</span> from the root element will simple return the previously rendered output.<br /> <br /> More documentation on how each of the different components work can be found in the <a href="core/index.htm">core.php</a> and <a href="site/index.htm">site.php</a> documentation files. </div> </div> </body> </html>