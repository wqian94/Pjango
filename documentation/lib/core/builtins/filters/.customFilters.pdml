<<<TITLE
Custom Filters
TITLE>>>

<<<SHORT
Custom Filters
SHORT>>>

<<<CONTENT
Although the built-in filters are sufficient for most puposes,
you may find the need to develop your own filters. In fact, you
are encouraged to implement additional filters to better suit
your website.

Creating a custom filter is very simple. Once the <var>core</var>
sublibrary has been included in your PHP script (done at the
top of <code>settings.php</code>), you can create a custom filter by
extending the <var>AbstractFilter</var> class (documentation provided <a href="AbstractFilter.htm">here</a>)
and defining the <var>render()</var> function.

The <var>render()</var> function takes in three arguments: <var>$args</var>, <var>$var</var>,
and <var>&$vars</var>.

<var>$args</var> is an array of the arguments passed into your filter.

<var>$var</var> is the value for your filter to manipulate; this could be
anything from a simple string or number to an array or an
instance of a class.

<var>$vars</var> is the associative array of the current system variables
at runtime. This is especially important for for-loops, as they
update the current system variables with each iteration. Since
it is passed by reference, be wary of mutating this variable.

Additionally, your <var>render()</var> function can also return any value,
including arrays and objects, though be advised that if no
other filters are used to further process them, they will be
converted to strings and printed as strings.

Finally, you will need to register your filter with the <var>__SITE</var>
class by using the <var>__SITE::addFilter($name,$instance)</var> function,
where <var>$name</var> is the character string that will be the associated
name of your filter, and <var>$instance</var> is an instance of the filter
class that you just created.

For example, the code for the <var>length</var> filter is reproduced below

<code>
1 class __Filter_length extends AbstractFilter{<br />
2 <span class="iblock" style="width:4em;">  </span>public static function render($args,$var,&$vars){<br />
3 <span class="iblock" style="width:8em;">    </span>if(is_array($var))<br />
4 <span class="iblock" style="width:12em;">      </span>return count($var);<br />
5 <span class="iblock" style="width:8em;">    </span>return strlen($var);<br />
6 <span class="iblock" style="width:4em;">  </span>}<br />
7 }<br />
8 __SITE::addFilter("length",new __Filter_length);
</code>

Now, the custom filter can be used in a template.
CONTENT>>>
